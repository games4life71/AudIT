// <auto-generated />
using System;
using AudIT.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AudIT.Infrastructure.Migrations
{
    [DbContext(typeof(AudITContext))]
    [Migration("20240626191853_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AudIT.Domain.Misc.BaseDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("BaseDocuments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseDocument");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ActionRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Impact")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ObjectiveActionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Probability")
                        .HasColumnType("int");

                    b.Property<int>("Risk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveActionId");

                    b.ToTable("ActionRisk");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ObjectiveActionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ObjectiveActionId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditMissions");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaseDocumentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.HasIndex("BaseDocumentId");

                    b.ToTable("AuditMissionDocument");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionObjectives", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("AuditMissionObjectives");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionRecommendations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("AuditMissionRecommendations");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.CurrentUsersAuditMission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CurrentUsersAuditMission");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HomePhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.EntityAcces", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccesType")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GrantedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GrantedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityAcces");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailDomains")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HomePhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InstitutionAdminId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InstitutionAdminId1")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionAdminId1");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.ToTable("Objective");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ObjectiveAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ControaleInterneAsteptate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ControaleInterneExistente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<bool>("Selected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("ObjectiveAction");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ObjectiveActionFiap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AditionalFindings")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AuditMissionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AuditedPeriodEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("AuditedPeriodStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cause")
                        .HasColumnType("longtext");

                    b.Property<string>("Consequence")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ObjectiveActionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuditMissionId");

                    b.HasIndex("ObjectiveActionId");

                    b.ToTable("ObjectiveActionFiap");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AditionalFindings")
                        .HasColumnType("longtext");

                    b.Property<string>("Cause")
                        .HasColumnType("longtext");

                    b.Property<string>("Consequence")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ObjectiveActionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("RecommendationDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveActionId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.RecommendationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaseDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReadAccesUserId")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("WriteAccesUserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaseDocumentId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationDocuments");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Functie")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("OfficePhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AudiT.Domain.Entities.UserInstitution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInstitution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AudiT.Domain.Entities.StandaloneDocument", b =>
                {
                    b.HasBaseType("AudIT.Domain.Misc.BaseDocument");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("StandaloneDocument");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.TemplateDocument", b =>
                {
                    b.HasBaseType("AudIT.Domain.Misc.BaseDocument");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("TemplateDocument");
                });

            modelBuilder.Entity("AudIT.Domain.Misc.BaseDocument", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Activity", null)
                        .WithMany("AttachedDocuments")
                        .HasForeignKey("ActivityId");

                    b.HasOne("AudiT.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ActionRisk", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.ObjectiveAction", null)
                        .WithMany("ActionRisks")
                        .HasForeignKey("ObjectiveActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Activity", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany("Actions")
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.ObjectiveAction", "ObjectiveAction")
                        .WithMany()
                        .HasForeignKey("ObjectiveActionId");

                    b.HasOne("AudiT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");

                    b.Navigation("Department");

                    b.Navigation("ObjectiveAction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMission", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionDocument", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany("AuditMissionDocuments")
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudIT.Domain.Misc.BaseDocument", "BaseDocument")
                        .WithMany()
                        .HasForeignKey("BaseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");

                    b.Navigation("BaseDocument");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionObjectives", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany("AuditMissionObjectives")
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMissionRecommendations", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany()
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Department", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Institution", "Institution")
                        .WithMany("Departments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.EntityAcces", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrantedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Institution", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.User", "InstitutionAdmin")
                        .WithMany()
                        .HasForeignKey("InstitutionAdminId1");

                    b.Navigation("InstitutionAdmin");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Notification", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Objective", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany()
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ObjectiveAction", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Objective", "Objective")
                        .WithMany("ObjectiveActions")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ObjectiveActionFiap", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.AuditMission", "AuditMission")
                        .WithMany()
                        .HasForeignKey("AuditMissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.ObjectiveAction", "ObjectiveAction")
                        .WithMany()
                        .HasForeignKey("ObjectiveActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditMission");

                    b.Navigation("ObjectiveAction");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.ObjectiveAction", "ObjectiveAction")
                        .WithMany()
                        .HasForeignKey("ObjectiveActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectiveAction");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.RecommendationDocument", b =>
                {
                    b.HasOne("AudIT.Domain.Misc.BaseDocument", "BaseDocument")
                        .WithMany()
                        .HasForeignKey("BaseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseDocument");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.User", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.UserInstitution", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AudiT.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AudiT.Domain.Entities.StandaloneDocument", b =>
                {
                    b.HasOne("AudiT.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Activity", b =>
                {
                    b.Navigation("AttachedDocuments");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.AuditMission", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("AuditMissionDocuments");

                    b.Navigation("AuditMissionObjectives");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Institution", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.Objective", b =>
                {
                    b.Navigation("ObjectiveActions");
                });

            modelBuilder.Entity("AudiT.Domain.Entities.ObjectiveAction", b =>
                {
                    b.Navigation("ActionRisks");
                });
#pragma warning restore 612, 618
        }
    }
}
