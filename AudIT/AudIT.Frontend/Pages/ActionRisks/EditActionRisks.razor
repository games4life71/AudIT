@page "/edit-risks/{objectiveActionId}"
@using Frontend.Contracts.Abstract_Services.ActionRiskService
@using Frontend.Contracts.Abstract_Services.ObjectiveActionService
@using Frontend.EntityDtos.Misc
@using Frontend.EntityViewModels.ActionRisk
@using Frontend.EntityViewModels.ObjectiveAction
@using Frontend.Pages.Components
@using Frontend.Pages.Components.Action
@using Orientation = Radzen.Orientation
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IObjectiveActionService _objectiveActionService
@inject IActionRiskService _actionRiskService
@inject NotificationService _notificationService
@if (_objectiveActionViewModel != null)
{
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText class="rz-mb-4" TextStyle="TextStyle.H4" Text="Action Risks of"></RadzenText>
        <RadzenText class="rz-mb-4" TextStyle="TextStyle.H4" Text="@_objectiveActionViewModel.name"></RadzenText>
    </RadzenStack>
    <RadzenRow class="rz-my-4">
        <RadzenButton Click="@CreateNewRisk" Text="Create New Risk" Icon="add"></RadzenButton>
    </RadzenRow>
    <RadzenRow>
        <RadzenDataGrid @ref="_dataGrid" AllowSorting="true" AllowFiltering="true" TItem="ActionRiskViewModel" Data="@_objectiveActionViewModel.actionRisks">
            <Columns>
                <RadzenDataGridColumn Property="name" Title="Name"/>
                <RadzenDataGridColumn Property="risk" Title="Risk"></RadzenDataGridColumn>
                <RadzenDataGridColumn Property="probability" Title="Probability"></RadzenDataGridColumn>
                <RadzenDataGridColumn Property="impact" Title="Impact"></RadzenDataGridColumn>
                <RadzenDataGridColumn Frozen="true" Filterable="false" Sortable="false">

                    <Template Context="actionRisk">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton Click="@(() => EditActionRisk(actionRisk))" Style="display: flex; align-self: center; justify-content: center ;" ButtonStyle="ButtonStyle.Warning" Icon="edit" Text="Edit"></RadzenButton>
                            <RadzenButton Click="@(() => RemoveActionRisk(actionRisk))" Icon="delete_forever" Style="display: flex; align-self: center; justify-content: center ;" ButtonStyle="ButtonStyle.Danger" Text="Remove"></RadzenButton>
                        </RadzenStack>
                    </Template>

                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenLabel Text="Total Risks: "></RadzenLabel>
            <RadzenText Text="@_objectiveActionViewModel.actionRisks.Count.ToString()"></RadzenText>
        </RadzenStack>
    </RadzenRow>
    <RadzenRow class="rz-my-12">
        <RadzenButton Click="@(() => _navigationManager.NavigateTo("/objectives"))" ButtonStyle="ButtonStyle.Secondary" Icon="arrow_back" Text="Back"></RadzenButton>
    </RadzenRow>
    @* Add a new Risk Form *@
    <RadzenRow>

    </RadzenRow>
}
else
{
    <RadzenText Text="Loading..."></RadzenText>
}


@code {
    RadzenDialog dialog;

    [Parameter] public string objectiveActionId { get; set; }

    private ObjectiveActionViewModel _objectiveActionViewModel = null;


}

@functions
{

    // void OnDialogClose( )
    // {
    //     if(_dialogService.Re)
    // }

    protected async override Task OnInitializedAsync()
    {
        await FetchObjectiveAction();
    }


    private async Task FetchObjectiveAction()
    {
        var objectiveAction = await _objectiveActionService.GetObjectiveActionByIdAsync(Guid.Parse(objectiveActionId));

        if (objectiveAction.Success && objectiveAction.DtoResponse != null)
        {
            _objectiveActionViewModel = new ObjectiveActionViewModel();
            _objectiveActionViewModel = objectiveAction.DtoResponse;
            StateHasChanged();
        }
    }


    private Task EditActionRisk(ActionRiskViewModel actionRisk)
    {
        _dialogService.Open<EditActionRiskDialog>(
            "Edit Action Risk",
            new Dictionary<string, object>()
            {
                { "ActionRisk", actionRisk },
                { "OnEditActionRisk", new EventCallback<ActionRiskViewModel>(this, OnDialogClose) }
            }, new DialogOptions()
            {
                Width = "700px",
                Height = "400px",
                Draggable = false,
                Resizable = false
            }
        );

        return Task.CompletedTask;
    }

    private void OnDialogClose(ActionRiskViewModel updatedActionRisk)
    {
        var actionRisk = _objectiveActionViewModel.actionRisks.FirstOrDefault(x => x.id == updatedActionRisk.id);
        if (actionRisk != null)
        {
            actionRisk.name = updatedActionRisk.name;
            actionRisk.risk = updatedActionRisk.risk;
            actionRisk.probability = updatedActionRisk.probability;
            actionRisk.impact = updatedActionRisk.impact;
        }
    }

    private async void CreateNewRisk(MouseEventArgs obj)
    {
        var newActionRisk = new ActionRiskViewModel();

        //open a dialog
        _dialogService.Open<CreateActionRiskDialog>(
            "Create New Action Risk",
            new Dictionary<string, object>()
            {
                { "ObjectiveActionId", objectiveActionId },
                { "OnCreateActionRisk", new EventCallback<ActionRiskViewModel>(this, OnCreateDialogClose) }
            }, new DialogOptions()
            {
                Width = "700px",
                Height = "400px",
                Draggable = false,
                Resizable = false
            }
        );
    }

    private async void OnCreateDialogClose(ActionRiskViewModel newActionRisk)
    {
        await FetchObjectiveAction();
        await _dataGrid.Reload();
        StateHasChanged();
    }


}

@code
{
    RadzenDataGrid<ActionRiskViewModel> _dataGrid;


    private async Task RemoveActionRisk(ActionRiskViewModel actionRisk)
    {
        //display a confirmation dialog
        var responseConfirm = await _dialogService.Confirm("Are you sure you want to remove this action risk?", "Remove Action Risk", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (responseConfirm.Value)
        {
            if (actionRisk.id == null)
            {
                _notificationService.Notify(NotificationSeverity.Error, "Action Risk Not Found", "Action Risk not found");
                return;
            }

            var response = await _actionRiskService.DeleteActionRiskAsync(Guid.Parse(actionRisk.id));

            if (response.Success)
            {
                _notificationService.Notify(NotificationSeverity.Success, "Action Risk Removed", "Action Risk has been removed successfully");
                _objectiveActionViewModel.actionRisks.Remove(actionRisk);
                await _dataGrid.Reload();
                // StateHasChanged();
            }
        }
    }
}