@using Frontend.Contracts.Abstract_Services.ActionRiskService
@using Frontend.EntityDtos.ActionRisk
@using Frontend.EntityViewModels.ActionRisk

@inject DialogService _dialogService
@inject IActionRiskService _actionRiskService
@inject NotificationService _notificationService

<RadzenCard Variant="Variant.Outlined">
    <RadzenRow class="rz-my-4">
        <RadzenColumn>
            <RadzenLabel Text="Risk Name:" Component="forName"></RadzenLabel>
            <RadzenTextBox @bind-Value="@ActionRisk.actionRiskName" Placeholder="@ActionRisk.actionRiskName"></RadzenTextBox>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenLabel Text="Risk:" Component="forRisk"></RadzenLabel>
            <RadzenNumeric Min="0" Max="10" @bind-Value="ActionRisk.Risk" Placeholder="@ActionRisk.Risk.ToString()"></RadzenNumeric>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow class="rz-my-4">
        <RadzenColumn>
            <RadzenLabel Text="Probability:" Component="forProbability"></RadzenLabel>
            <RadzenNumeric Min="0" Max="10" @bind-Value="ActionRisk.Probability" Placeholder="@ActionRisk.Probability.ToString()"></RadzenNumeric>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenLabel Text="Impact:" Component="forImpact"></RadzenLabel>
            <RadzenNumeric Min="0" Max="10" @bind-Value="ActionRisk.Impact" Placeholder="@ActionRisk.Impact.ToString()"></RadzenNumeric>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack class="rz-my-12" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Save" Click="@(() => SumbitChanges())"></RadzenButton>
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="@(() => _dialogService.Close(null))"></RadzenButton>

    </RadzenStack>

</RadzenCard>


@code {
    [Parameter] public string objectiveActionId { get; set; }

    [Parameter] public EventCallback<ActionRiskViewModel> OnCreateActionRisk { get; set; }

    private CreateActionRiskDto ActionRisk = new CreateActionRiskDto();

    private async Task SumbitChanges()
    {

        ActionRisk.objectiveActionId = Guid.Parse(objectiveActionId);
        var response = await _actionRiskService.CreateActionRiskAsync(ActionRisk);

        if (response.Success)
        {
            var newActionRisk = new ActionRiskViewModel();
            newActionRisk.name = ActionRisk.actionRiskName;
            newActionRisk.risk = ActionRisk.Risk;
            newActionRisk.probability = ActionRisk.Probability;
            newActionRisk.impact = ActionRisk.Impact;

            _notificationService.Notify(NotificationSeverity.Success, "Success", "Action Risk created successfully");
            await OnCreateActionRisk.InvokeAsync(newActionRisk);
        }

        //reset the form
        ActionRisk = new CreateActionRiskDto();

    }

}