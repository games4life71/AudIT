@page "/view-pdf"
@using Frontend.Contracts.Abstract_Services.DocumentService
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.PdfViewer
@inject IDocumentService _documentService
@inject NavigationManager navigationManager


@if (display)
{
    <RadzenColumn>
        <PdfViewer  Url="@string.Format("data:application/pdf;base64,{0}", pdfBase64String)"/>
    </RadzenColumn>
}

else
{
    // Display a loading spinner
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}


@code {
    SfPdfViewer pdfViewer;
    private string pdfBase64String;

    bool display = false;

    public string documentName { get; set; } = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the document from the databaseThe PDF file is empty, i.e. its size is zero bytes.

        var uri = navigationManager.Uri;

        var queryParams = QueryHelpers.ParseQuery(new Uri(uri).Query);


        if (queryParams.TryGetValue("documentName", out var documentNameParam))
        {
            var name = documentNameParam.FirstOrDefault();

            if (name != null)
            {
                documentName = name;
                var document = await _documentService.DownloadStandaloneDocumentAsync(documentName);

                if (document != null)
                {
                    display = true;

                    // Convert the response stream to a byte array
                    byte[] byteArray;
                    using (var memoryStream = new MemoryStream())
                    {
                        await document.CopyToAsync(memoryStream);
                        byteArray = memoryStream.ToArray();
                    }

                    // Convert the byte array to a base64 string
                    string base64String = Convert.ToBase64String(byteArray);

                    pdfBase64String = base64String;
                }
            }
        }

    }

}