@page "/upload-document"
@using System.Net
@using Frontend.Contracts.Abstract_Services.DepartmentService
@using Frontend.Contracts.Abstract_Services.DocumentService
@using Frontend.Contracts.Abstract_Services.InstitutionsService
@using Frontend.EntityDtos.Department
@using Frontend.EntityDtos.Document.Standalone
@using Frontend.EntityDtos.Document.Template
@using Frontend.EntityDtos.Institution

@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject IDepartmentService _departmentService
@inject IInstitutionService _institutionService
@inject IDocumentService _documentService

<RadzenStack Orientation="Orientation.Vertical">

    <RadzenSteps >

        <Steps>
            @*Select insitution*@
            <RadzenStepsItem Text="Institution">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenLabel Text="Institution: "></RadzenLabel>
                    <RadzenDropDownDataGrid TValue="Guid"
                                            Value="_selectedInstitutionId"
                                            TextProperty="Name"
                                            ValueProperty="Id"
                                            Data="_institutions"
                                            ValueChanged="@((value) => FetchDepartments(value))"/>
                </RadzenStack>

            </RadzenStepsItem>

            @code{


                public bool DepartmentDisabledCheck()
                {
                    return _institutions.Count == 0 || _departments.Count == 0;
                }


            }

            @*Select department*@
            <RadzenStepsItem Text="Department">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenLabel Text="Department: "></RadzenLabel>
                    <RadzenDropDownDataGrid TValue="Guid"
                                            Disabled="DepartmentDisabledCheck()"
                                            TextProperty="Name"
                                            ValueProperty="Id"
                                            Data="_departments"
                                            @bind-Value="@_selectedDepartmentId"/>
                </RadzenStack>

            </RadzenStepsItem>

            <RadzenStepsItem Text="Document">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenToggleButton Click="@ToggleButtonClick" ToggleShade="Shade.Darker" Icon="toggle_on" Variant="Variant.Flat" Text="Template Document"></RadzenToggleButton>
                    </RadzenStack>
                    @if (templateDocumentSelected)
                    {
                        <RadzenLabel Text="Version" Component="version"></RadzenLabel>
                        <RadzenNumeric TValue="int" @bind-Value="@documentVersion"></RadzenNumeric>

                        <RadzenLabel Text="State" Component="state"></RadzenLabel>
                        <RadzenListBox TValue="string" Value="@_selectedDocumentState" ValueChanged="OnDocumentTypeChanged" Data="@_documentTypes"/>



                        <RadzenLabel Text="Type" Component="type"></RadzenLabel>
                        @* <RadzenListBox  bind-Value="@_selectedDocumentState" Name="state" Data="_documentStates"/> *@
                        <RadzenListBox TValue="string" Value="@_selectedDocumentState" ValueChanged="OnDocumentStateChanged" Data="@_documentStates"/>
                    }


                    <RadzenLabel Text="Uplod Document"></RadzenLabel>
                    <RadzenUpload @ref="@uploadForm"
                                  Multiple="true"
                                  Icon="uploads"
                                  MaxFileCount="5"
                                  Change="@((args) => ChangeSelectedFiles(args))">

                    </RadzenUpload>
                </RadzenStack>
            </RadzenStepsItem>

            @code{

                private bool templateDocumentSelected { get; set; } = false;
                void OnDocumentTypeChanged(string newType)
                {
                    Console.WriteLine($"Selected activity type: {newType}");
                    _selectedDocumentType = newType;
                }

                void OnDocumentStateChanged(string newState)
                {
                    Console.WriteLine($"Selected activity type: {newState}");
                    _selectedDocumentState = newState;
                }
            }

        </Steps>


    </RadzenSteps>

    <RadzenButton Click="@UploadFiles" IsBusy="isBusySubmit" Text="Submit" ButtonStyle="ButtonStyle.Success"></RadzenButton>

    </RadzenStack>


@code
{
    private bool isBusySubmit { get; set; } = false;
}

@code {

    private List<BaseInstitutionDto> _institutions { get; set; } = [];
    private List<BaseDepartmentDto> _departments { get; set; } = [];

    private List<string> _documentTypes = Enum.GetNames(typeof(TemplateTypeStage)).ToList();
    private List<string> _documentStates = Enum.GetNames(typeof(DocumentState)).ToList();

    private Guid _selectedInstitutionId { get; set; } = Guid.Empty;
    private Guid _selectedDepartmentId { get; set; } = Guid.Empty;
    private int documentVersion { get; set; } = 0;

    private string _selectedDocumentType { get; set; } = String.Empty;
    private string _selectedDocumentState { get; set; } = String.Empty;


    private RadzenUpload uploadForm;

    private List<FileInfo> _selectedFiles = [];

    protected async override Task OnInitializedAsync()
    {
        await FetchInstitutions();
    }

    private async Task FetchInstitutions()
    {
        var result = await _institutionService.GetAllInstitutionsAsync();

        if (result.Success && result.DtoResponses.Count > 0)
        {
            _institutions = result.DtoResponses;
        }
    }


    private async Task FetchDepartments(Guid value)
    {
        _selectedInstitutionId = value;

        var result = await _departmentService.GetDepartmentsByInstitutionIdAsync(value);

        if (result.Success && result.DtoResponses.Count > 0)
        {
            _departments = result.DtoResponses;
        }
    }

    private void ToggleButtonClick(MouseEventArgs obj)
    {
        templateDocumentSelected = !templateDocumentSelected;
    }

    private Task ChangeSelectedFiles(UploadChangeEventArgs args)
    {
        _selectedFiles = args.Files.ToList();
        return Task.CompletedTask;
    }

    private async void UploadFiles(MouseEventArgs obj)
    {
        try
        {
            if (!templateDocumentSelected)
            {
                //upload a normal document
                if (_selectedFiles.Count == 1)
                {
                    var command = new BaseCreateStandaloneDocument();

                    command.DepartmentId = _selectedDepartmentId;
                    command.UploadDocument = _selectedFiles.First();

                    var result = await _documentService.UploadStandaloneDocumentAsync(command);

                    if (result.Success)
                    {
                        _notificationService.Notify(NotificationSeverity.Success, "Document uploaded successfully");
                        //clear the selected files
                        _selectedFiles.Clear();
                        _selectedDepartmentId = Guid.Empty;
                        _selectedInstitutionId = Guid.Empty;
                        await uploadForm.ClearFiles();
                    }
                    else
                    {
                        _notificationService.Notify(NotificationSeverity.Error, "Document upload failed");
                    }
                }

                else
                {
                    var command = new MultipleCreateStandaloneDocument();

                    command.DepartmentId = _selectedDepartmentId;
                    command.UploadDocuments = _selectedFiles;

                    var result = await _documentService.UploadMultipleStandaloneDocsAsync(command);

                    if (result.Success)
                    {
                        _notificationService.Notify(NotificationSeverity.Success, "Documents uploaded successfully");
                        //clear the selected files
                        _selectedFiles.Clear();
                        _selectedDepartmentId = Guid.Empty;
                        _selectedInstitutionId = Guid.Empty;
                        await uploadForm.ClearFiles();
                    }
                    else
                    {
                        _notificationService.Notify(NotificationSeverity.Error, "Document upload failed");
                    }
                }
            }
            else
            {
                isBusySubmit = true;
                var command = new BaseCreateTemplateDocumentDto();

                command.Version = documentVersion.ToString();
                //find the state in DocumentState enum
                command.State = (DocumentState)Enum.Parse(typeof(DocumentState),_selectedDocumentState);
                command.Type = (TemplateTypeStage)Enum.Parse(typeof(TemplateTypeStage),_selectedDocumentType);


                command.Files = _selectedFiles;

                var result = await _documentService.UploadTemplateDocumentAsync(command);

                if (result.Success)
                {
                    _notificationService.Notify(NotificationSeverity.Success, "Document uploaded successfully");
                    //clear the selected files
                    _selectedFiles.Clear();
                    _selectedDepartmentId = Guid.Empty;
                    _selectedInstitutionId = Guid.Empty;
                    await uploadForm.ClearFiles();
                }
                else
                {
                    _notificationService.Notify(NotificationSeverity.Error, "Document upload failed");
                }
                isBusySubmit = false;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}