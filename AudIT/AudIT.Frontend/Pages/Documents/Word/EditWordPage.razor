@page "/edit-word"
@inject  IDocumentService _documentService
@inject NotificationService _notificationService
@inject NavigationManager _navigationManager


@using Frontend.Contracts.Abstract_Services.DocumentService
@using Frontend.EntityDtos.Document.Standalone
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.DocumentEditor




<RadzenStack Orientation="Orientation.Vertical">
 <RadzenCard Variant="Variant.Outlined">
  <RadzenStack Orientation="Orientation.Horizontal">
   <RadzenButton Text="Save" Click="@SaveDocument"></RadzenButton>
  </RadzenStack>
 </RadzenCard>
 <SfDocumentEditorContainer Width="85%" ShowPropertiesPane="false" @ref="@container" Height="100%">
 </SfDocumentEditorContainer >

</RadzenStack>







@code {



      SfDocumentEditorContainer container;


    protected override void OnInitialized()
    {
     var uri = _navigationManager.Uri;

     // Parse the query parameters
     var queryParameters = QueryHelpers.ParseQuery(new Uri(uri).Query);

     // Try to get the documentName parameter
     if (queryParameters.TryGetValue("documentName", out var documentName))
     {
      // Use the document name
      documentName = documentName.First();
      FetchDocument(documentName);

     }


    }

    private async void SaveDocument(MouseEventArgs obj)
    {
     var editor = container.DocumentEditor;
     // await editor.SaveAsync("sample.docx", FormatType.Docx);

     var edited_document = await editor.SaveAsBlobAsync(FormatType.Docx);

     var content = Convert.FromBase64String(edited_document);

     var command = new BaseCreateStandaloneDocumentStream();


     command.DepartmentId = Guid.Parse("CE2CE527-16F6-4E4D-8971-4D4B6A58CCA5");
     command.Name = "sample.docx";
     var uploadStream = new MemoryStream(content);
     command.UploadDocument = uploadStream;


   var result =   await _documentService.UploadStandaloneDocumentContentAsync(command);

   if (result.Success)
   {
    _notificationService.Notify(NotificationSeverity.Success, "Document saved successfully");
    //clear the editor
    await editor.OpenBlankAsync();
   }
   else
   {
    _notificationService.Notify(NotificationSeverity.Error, "Document not saved");
   }

    }

    private async  Task FetchDocument(string value)
    {
      var stream = await _documentService.DownloadTemplateDocumentAsync(value);
      if (stream != null)
      {
       var extension = Path.GetExtension(value);

       // Load the stream into the document editor

       await container.DocumentEditor.OpenAsync(stream,ImportFormatType.Txt);

      }
      else
      {
       throw new Exception("Document not found");
      }




    }

}