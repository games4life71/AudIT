@page "/objective-action/{ObjectiveActionId}"
@using Frontend.Contracts.Abstract_Services.ActionRiskService
@using Frontend.Contracts.Abstract_Services.ActivityService
@using Frontend.Contracts.Abstract_Services.DepartmentService
@using Frontend.Contracts.Abstract_Services.FiapService
@using Frontend.Contracts.Abstract_Services.ObjectiveActionService
@using Frontend.Contracts.Abstract_Services.ObjectiveService
@using Frontend.EntityDtos.Department
@using Frontend.EntityDtos.Fiap
@using Frontend.EntityViewModels.ActionRisk
@using Frontend.EntityViewModels.Activity
@using Frontend.EntityViewModels.Fiap
@using Frontend.EntityViewModels.Objective
@using Frontend.EntityViewModels.ObjectiveAction
@using Frontend.Pages.Components

@inject IDepartmentService _departmentService
@inject IActivityService _activityService
@inject NavigationManager NavigationManager
@inject IObjectiveService _objectiveService
@inject TooltipService _tooltipService
@inject IObjectiveActionService _objActionService
@inject IFiapService _fiapService
@inject DialogService DialogService
@inject IActionRiskService _actionRiskService
@inject NotificationService _NotificationService
@*Summary of the Objective Action*@
<RadzenRow class="rz-my-6" JustifyContent="JustifyContent.Start">
    <RadzenCard Variant="Variant.Outlined">
        <RadzenText class="rz-mb-4" TextStyle="TextStyle.DisplayH5" Text="Summary"></RadzenText>
        <RadzenStack Orientation="Orientation.Vertical">
            @*First row of info *@
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenLabel Component="forName" Text="Name:"></RadzenLabel>
                    <RadzenText Text="@_objectiveActionViewModel.name"> </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenLabel Component="forSelected" Text="Selected:"></RadzenLabel>
                    <RadzenText Text="@_objectiveActionViewModel.selected.ToString()"> </RadzenText>
                </RadzenStack>
            </RadzenStack>
            @*Second row of info *@
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenLabel Component="forControl1" Text="Controale interne asteptate:"></RadzenLabel>
                        @* <RadzenTextArea Rows="3" Text="@(() => fromListToString(_objectiveActionViewModel.controaleInterneAsteptate))"> </RadzenTextArea> *@
                        @if (_objectiveActionViewModel != null && _objectiveActionViewModel.controaleInterneAsteptate.Any())
                            @foreach (var item in _objectiveActionViewModel.controaleInterneAsteptate)
                        {
                            Console.WriteLine("Element found !");
                            <RadzenCard Variant="Variant.Outlined">
                                <RadzenText Name="forControl1" Text="@item"></RadzenText>
                            </RadzenCard>
                        }
                        else
                        {
                            Console.WriteLine("No elements found !");
                        }

                        @code
                        {
                            private string fromListToString(List<string> list)
                            {
                                if (list.Count == 0)
                                {
                                    return "No elements found !";
                                }

                                string result = "";
                                foreach (var item in list)
                                {
                                    result += item + "\n";
                                }

                                return result;
                            }
                        }

                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenLabel Component="forControl1" Text="Controale interne asteptate:"></RadzenLabel>
                        @* <RadzenTextArea Rows="3" Text="@(() => fromListToString(_objectiveActionViewModel.controaleInterneExistente))"> </RadzenTextArea> *@
                        @if (_objectiveActionViewModel.controaleInterneExistente.Any())
                            @foreach (var item in _objectiveActionViewModel.controaleInterneExistente)
                        {
                            Console.WriteLine("Element found !");
                            <RadzenCard Variant="Variant.Outlined">
                                <RadzenText Name="forControl1" Text="@item"></RadzenText>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenStack>

            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</RadzenRow>

@*Actiuni cu riscuri asociate*@
<RadzenRow class="rz-my-6">
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenText TextStyle="TextStyle.DisplayH5" Text="Action Risks"></RadzenText>
            <RadzenDataGrid @ref="@actionDataGrid" Data="@_objectiveActionViewModel.actionRisks" TItem="ActionRiskViewModel">
                <Columns>
                    <RadzenDataGridColumn Title="Risk Name" Property="name"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Impact" Property="impact"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Probability" Property="probability"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Risk score" Property="risk"></RadzenDataGridColumn>
                    <RadzenDataGridColumn >
                        <Template Context="actionRisk">
                            <RadzenStack JustifyContent="JustifyContent.Center" Orientation="Orientation.Horizontal">
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="@(() => OpenRiskEdit(actionRisk))" Icon="edit" Text="Edit"></RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteRisk(actionRisk))" Icon="delete" Text="Delete"></RadzenButton>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>
            <RadzenButton Click="@AddNewActionRisk" Text="Add new Action Risk" ButtonStyle="ButtonStyle.Dark" Icon="add"></RadzenButton>
        </RadzenStack>
    </RadzenCard>
</RadzenRow>


@*Associated Fiaps*@
<RadzenRow>
    <RadzenRow class="rz-my-6">
        <RadzenCard Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenText TextStyle="TextStyle.DisplayH5" Text="Associated FIAPS"></RadzenText>
                <RadzenDataGrid @ref="@fiapDataGrid" Data="@_fiaps" TItem="BaseObjActionFiapViewmodel">
                    <Columns>
                        <RadzenDataGridColumn Filterable="true" Sortable="true" Title="Name" Property="Name"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Filterable="true" Sortable="true"Title="Start" Property="AuditedPeriodStart"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Filterable="true" Sortable="true" Title="End" Property="AuditedPeriodEnd"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Filterable="true" Sortable="true"Title="Problem" Property="Problem"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Filterable="true" Sortable="true"Title="Cause" Property="Cause"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Filterable="true" Sortable="true" Title="Recommendation" Property="Recommendation"></RadzenDataGridColumn>
                        <RadzenDataGridColumn >
                            <Template Context="fiap">
                                <RadzenStack JustifyContent="JustifyContent.Center" Orientation="Orientation.Horizontal">
                                    <RadzenButton MouseEnter="@((obj) => ShowToolTipText(obj, "Edit"))" ButtonStyle="ButtonStyle.Warning" Click="@(() => NavigateFiapEdit(fiap))" Icon="edit"></RadzenButton>
                                    <RadzenButton MouseEnter="@((obj) => ShowToolTipText(obj, "Delete"))" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteFiap(fiap))" Icon="delete"></RadzenButton>
                                    <RadzenButton MouseEnter="@ShowExportToolTip" ButtonStyle="ButtonStyle.Info" Click="@(() => ExportFiap(fiap))" Icon="open_in_new_off"></RadzenButton>
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <RadzenButton Click="@AddNewFiapNavigate" Text="Add new FIAP" ButtonStyle="ButtonStyle.Dark" Icon="add"></RadzenButton>
            </RadzenStack>
        </RadzenCard>
    </RadzenRow>
</RadzenRow>

@*Associated Activities*@
<RadzenRow class="rz-my-6">
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenText TextStyle="TextStyle.DisplayH5" Text="Associated Activities"></RadzenText>
            <RadzenDataGrid AllowFiltering="true" AllowSorting="true" Data="@_activities" TItem="ActivityWithDepartViewModel">
                <Columns>
                    <RadzenDataGridColumn Title="Name" Property="Name"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title=" Department Name" Property="Department.Name"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Type" Property="Type"></RadzenDataGridColumn>
                    <RadzenDataGridColumn>
                        <Template Context="activity">
                            <RadzenStack JustifyContent="JustifyContent.Center" Orientation="Orientation.Horizontal">
                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="@(() => OpenActivityEdit(activity))" Icon="edit" Text="Edit"></RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteActivity(activity))" Icon="delete" Text="Delete"></RadzenButton>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

            <RadzenButton Click="@AddNewActivityNavigate" Text="Add new Activity" ButtonStyle="ButtonStyle.Dark" Icon="add"></RadzenButton>
        </RadzenStack>
    </RadzenCard>
</RadzenRow>

<RadzenRow class=rz-mt-4>

    <RadzenStack JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal">
        <RadzenButton Click="@NavigateBack" Text="Back" ButtonStyle="ButtonStyle.Secondary" Icon="arrow_back"></RadzenButton>
    </RadzenStack>

</RadzenRow>


@code {

    [Parameter] public string ObjectiveActionId { get; set; }

    private ObjectiveActionViewModel _objectiveActionViewModel = new ObjectiveActionViewModel();

    private RadzenDataGrid<ActionRiskViewModel> actionDataGrid;
    private RadzenDataGrid<BaseObjActionFiapViewmodel> fiapDataGrid;

    private List<ActivityWithDepartViewModel> _activities = [];


    private ObjectiveFullViewModel _currentObjective;
    private List<BaseObjActionFiapViewmodel> _fiaps = [];




    List<Test> _tests = [];


    private async Task FetchCurrentObj()
    {

        if (!string.IsNullOrEmpty(_objectiveActionViewModel.objectiveId))
        {
            var objective = await _objectiveService.GetObjectiveWithActionsByIdAsync(Guid.Parse(_objectiveActionViewModel.objectiveId));

            if (objective.Success)
            {
                if (objective.DtoResponse != null) _currentObjective = objective.DtoResponse;
            }
        }
        else
        {
            // Handle the case where _objectiveActionViewModel.objectiveId is null
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchObjectiveAction();
        await FetchCurrentObj();
        await FetchFiaps();
        await FetchActivities();
    }

}

@functions
{
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/objectives");
    }


    private async Task FetchActivities()
    {
        try
        {
            var result = await _activityService.GetActivitiesByObjectiveActionIdAsync(Guid.Parse(ObjectiveActionId));

            if (result.Success)
            {
                _activities = result.DtoResponses;
            }
            else
            {
                Console.WriteLine("Failed to fetch activities. Error message: " + result.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred while fetching activities: " + ex.Message);
        }
    }


    private async Task FetchFiaps()
    {
        var result = await _fiapService.GetFiapByObjectiveActionIdAsync(Guid.Parse(ObjectiveActionId));

        if (result.Success)
        {
            _fiaps = result.DtoResponses;
        }
    }

    private async Task FetchObjectiveAction()
    {
        var result = await _objActionService.GetObjectiveActionByIdAsync(Guid.Parse(ObjectiveActionId));

        if (result.Success && result.DtoResponse != null)
        {
            _objectiveActionViewModel = result.DtoResponse;
            StateHasChanged();

        }
    }

    private Task OpenRiskEdit(ActionRiskViewModel actionRisk)
    {
        DialogService.Open<EditActionRiskDialog>(
            "Edit Action Risk",
            new Dictionary<string, object>()
            {
                { "ActionRisk", actionRisk },
                { "OnDialogClose", new EventCallback<ActionRiskViewModel>(this, OnDialogClose) }
            }, new DialogOptions()
            {
                Width = "700px",
                Height = "400px",
                Draggable = false,
                Resizable = false
            }
        );

        return Task.CompletedTask;
    }

    private void OnDialogClose(ActionRiskViewModel updatedActionRisk)
    {
        var actionRisk = _objectiveActionViewModel.actionRisks.FirstOrDefault(x => x.id == updatedActionRisk.id);
        if (actionRisk != null)
        {
            actionRisk.name = updatedActionRisk.name;
            actionRisk.risk = updatedActionRisk.risk;
            actionRisk.probability = updatedActionRisk.probability;
            actionRisk.impact = updatedActionRisk.impact;
        }
    }

    private async Task DeleteRisk(ActionRiskViewModel actionRisk)
    {
        var result = await DialogService.Confirm("Are you sure you want to delete this risk?", "Delete Risk", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result.Value)
        {
            var RiskToBeDeleted = _objectiveActionViewModel.actionRisks.FirstOrDefault(x => x.id == actionRisk.id);

            if (RiskToBeDeleted != null)
            {
                var delelteResult = await _actionRiskService.DeleteActionRiskAsync(Guid.Parse(RiskToBeDeleted.id));

                var newActionRisks = _objectiveActionViewModel.actionRisks.Where(x => x.id != actionRisk.id).ToList();

                _objectiveActionViewModel.actionRisks = newActionRisks;

                if (delelteResult.Success)
                {
                    //display a success message
                    _NotificationService.Notify(NotificationSeverity.Success, "Risk deleted successfully");
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    //display an error message
                    _NotificationService.Notify(NotificationSeverity.Error, "Failed to delete risk");
                }
            }
        }
    }

    private Task NavigateFiapEdit(BaseObjActionFiapViewmodel fiap)
    {
        throw new NotImplementedException();
    }

    private async Task DeleteFiap(BaseObjActionFiapViewmodel fiap)
    {
        //show a confirmation dialog

        var result = await DialogService.Confirm("Are you sure you want to delete this FIAP?",
            "Delete FIAP", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result.Value)
        {
            var resultDelete = await _fiapService.DeleteFiapAsync(fiap.Id);

            if (resultDelete.Success)
            {
                //display a success message
                _NotificationService.Notify(NotificationSeverity.Success, "FIAP deleted successfully");

                // Create a new list without the deleted fiap
                var updatedFiaps = _fiaps.Where(f => f.Id != fiap.Id).ToList();

                // Assign the new list to _fiaps
                _fiaps = updatedFiaps;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                //display an error message
                _NotificationService.Notify(NotificationSeverity.Error, "Failed to delete FIAP");
            }
        }
    }

    private Task ExportFiap(BaseObjActionFiapViewmodel fiap)
    {
        NavigationManager.NavigateTo($"export-fiap/{fiap.Id}");

        return Task.CompletedTask;
    }

    private void ShowToolTipText(ElementReference obj, string text)
    {
        _tooltipService.OpenOnTheTop(obj, text, new TooltipOptions() { Position = TooltipPosition.Top, Duration = 2000 });
    }

    private void ShowExportToolTip(ElementReference obj)
    {
        //display a tool tip

        _tooltipService.OpenOnTheTop(obj, "Export", new TooltipOptions() { Position = TooltipPosition.Top, Duration = 2000 });
    }

    private Task OpenActivityEdit(ActivityWithDepartViewModel activity)
    {
        throw new NotImplementedException();
    }

    private Task DeleteActivity(ActivityWithDepartViewModel activity)
    {
        throw new NotImplementedException();
    }

    private async void AddNewFiapNavigate()
    {   
        
        var auditMission = Guid.Parse(_currentObjective.auditMissionId);
        // var objNAme = objective.DtoResponse.name;
        try
        {
            DialogService.Open<CreateFiapDialog>(
                "Create New Fiap",
                new Dictionary<string, object>()
                {
                    { "ObjectiveActionId", Guid.Parse(ObjectiveActionId) },
                    { "AuditMissionId", auditMission },
                    {
                        "OnFiapDialogClose", new EventCallback<BaseCreateFiapDto>(this, OnCreateFiapDialogClose)

                    }
                }, new DialogOptions()
                {
                    Width = "1000px",
                    Height = "750px",
                    Draggable = false,
                    Resizable = false

                }
            );

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }

    private async Task OnCreateFiapDialogClose(BaseCreateFiapDto newFiap)
    {
        var fiap = new BaseObjActionFiapViewmodel
        {
            Name = newFiap.Name,
            AuditedPeriodStart = newFiap.AuditedPeriodStart,
            AuditedPeriodEnd = newFiap.AuditedPeriodEnd,
            Problem = newFiap.Problem,
            Cause = newFiap.Cause,
            Recommendation = newFiap.Recommendation
        };

        _fiaps.Add(fiap);
        var newFiaps = _fiaps;
        _fiaps = newFiaps;

        await fiapDataGrid.Reload();

        await InvokeAsync(StateHasChanged);
    }


    private void AddNewActivityNavigate(MouseEventArgs obj)
    {
        throw new NotImplementedException();
    }

    private void AddNewActionRisk(MouseEventArgs obj)
    {
        var newActionRisk = new ActionRiskViewModel();

//open a dialog
        DialogService.Open
            <CreateActionRiskDialog>(
                "Create New Action Risk",
                new Dictionary
                    <string, object>()
                    {
                        { "ObjectiveActionId", ObjectiveActionId },
                        {
                            "OnDialogClose", new EventCallback
                                <ActionRiskViewModel>(this, OnDialogClose)
                        }
                    }, new DialogOptions()
                {
                    Width = "800px",
                    Height = "500px",
                    Draggable = false,
                    Resizable = false
                }
            );
    }

    private async void OnCreateDialogClose(ActionRiskViewModel newActionRisk)
    {
        _objectiveActionViewModel.actionRisks.Add(newActionRisk);
        await actionDataGrid.Reload();
        StateHasChanged();
    }

}