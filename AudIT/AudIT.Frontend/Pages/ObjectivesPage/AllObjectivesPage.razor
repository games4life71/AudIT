@page "/objectives"
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.CurrentUserAuditMissionService
@using Frontend.Contracts.Abstract_Services.ObjectiveService
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityViewModels.Objective
@using Frontend.EntityViewModels.ObjectiveAction
@using Frontend.Pages.Components
@using Frontend.Pages.Components.Objective
@using Frontend.Pages.Components.ObjectiveAction
@using Frontend.Services.AuthentificationServices
@using Radzen
@inject NotificationService _notificationService
@inject IAuditMissionService _auditMissionService
@inject IObjectiveService _objectiveService
@inject ICurrentUserAuditMissionService _currentUserAuditMissionService
@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject CustomAuthStateProvider _authStateProvider

@if (_isAuthenticated)
{
    <RadzenStack class="rz-mb-10" Gap="10px">
        <RadzenRow>
            <RadzenLabel Component="SelectAuditMission" Text="Select Audit Mission:"></RadzenLabel>
            <RadzenDropDownDataGrid
                Value="@initialAuditMission"
                PageSize="5"
                Placeholder="Select..."
                TValue="Guid"
                TextProperty="Name"
                AllowSorting="true"
                ValueChanged="@(args => SelectedAuditMission(args))"
                ValueProperty="Id"
                Data="@_auditMissions"
                Name="SelectAuditMission"/>
        </RadzenRow>
    </RadzenStack>

    <RadzenRow>
        <RadzenCard Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true"
                                Data="@_objectiveFullViewModels" TItem="ObjectiveFullViewModel" ExpandMode="DataGridExpandMode.Multiple">
                    <Template Context="objective">
                        <RadzenTabs>
                            <Tabs>
                                <RadzenTabsItem Text="Objective Actions">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenDataGrid AllowSorting="true" Data="@objective.objectiveActions">
                                            <Columns>
                                                <RadzenDataGridColumn Title="Objective Action Name" Property="name"/>
                                                <RadzenDataGridColumn Sortable="true" Title="Last Modified Date" Property="lastModifiedDate"/>
                                                <RadzenDataGridColumn Title="Action Risks Details" Sortable="false" Filterable="false">
                                                    <Template Context="objectiveAction">
                                                        <RadzenStack Orientation="Orientation.Vertical">
                                                            <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info"
                                                                          Text="More details " Click="@(() => OpenActionRiskDialog(objectiveAction))">
                                                            </RadzenButton>
                                                        </RadzenStack>
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn Frozen="true" Title="Selected in auditing" Property="selected"></RadzenDataGridColumn>
                                                <RadzenDataGridColumn Width="15%" Frozen="true" Sortable="false" Filterable="false" Title="">

                                                    <Template Context="objectiveAction">
                                                        <RadzenStack Orientation="Orientation.Vertical">
                                                            <RadzenButton Shade="Shade.Lighter" Icon="info" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Text="More details " Click="@(() => NavigateObjAction(objectiveAction))"></RadzenButton>
                                                        </RadzenStack>
                                                    </Template>

                                                </RadzenDataGridColumn>
                                            </Columns>

                                        </RadzenDataGrid>
                                        <RadzenButton Click="@NavigateAddObjAction" ButtonStyle="ButtonStyle.Dark" Text="Add new Objective Action"></RadzenButton>
                                    </RadzenStack>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Options" Icon="build">

                                    <RadzenRow>
                                        <RadzenButton Icon="bookmark" Click="@(() => _navigationManager.NavigateTo($"risks/{objective.id}"))" Text="Configure Risks"></RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="assignment" Click="@(() => OpenEditNameForm(objective))" Text="Edit Name"></RadzenButton>
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(() => DeleteObjective(objective))" Text="Delete Objective"></RadzenButton>
                                    </RadzenRow>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    </Template>

                    <Columns>
                        <RadzenDataGridColumn Property="name" Title="Objective Name"></RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="20%">
                            <Template Context="objective">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenButton Click="@(() => NavigateObjective(objective))" Text="More details.." ButtonStyle="ButtonStyle.Dark"></RadzenButton>
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <RadzenButton Click="@NavigateAddObjective" ButtonStyle="ButtonStyle.Dark" Text="Add Objective "></RadzenButton>
            </RadzenStack>
        </RadzenCard>
    </RadzenRow>
}


@code
{

    private Guid _currentUserAuditMission = Guid.Empty;
    private List<BaseAuditMissionDto> _auditMissions = [];
    private Guid _selectedAuditMissionId = Guid.Empty;
    private List<ObjectiveFullViewModel> _objectiveFullViewModels = [];

    private bool _isAuthenticated = false;

    private Guid initialAuditMission { get; set; }
}

@functions
{
    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await GetAuthState();
        if (!_isAuthenticated)
        {
            _navigationManager.NavigateTo("/login");
            return;
        }

        await FetchAuditMissions();
        await FetchCurrentAuditMission();


        //if the user has an audit mission selected , select it
        if (_currentUserAuditMission != Guid.Empty)
        {
            initialAuditMission = _currentUserAuditMission;
            SelectedAuditMission(_currentUserAuditMission);
        }
        else
        {
            //if the user has no audit mission selected , select the first one
            initialAuditMission = _auditMissions.FirstOrDefault().Id;
            SelectedAuditMission(initialAuditMission);
            _selectedAuditMissionId = initialAuditMission;
        }
    }

    private async Task FetchCurrentAuditMission()
    {
        var result = await _currentUserAuditMissionService.GetCurrentUserAuditMissionAsync();

        if (result.Success)
        {
            _currentUserAuditMission = result.DtoResponse.AuditMissionId;
        }
    }

    private async Task<bool> GetAuthState()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity != null && !authState.User.Identity.IsAuthenticated)
            return false;

        return true;
    }

    private async Task FetchAuditMissions()
    {
        var auditMissions = await _auditMissionService.GetAuditMissionByOwnerId();
        if (auditMissions.Success)
        {
            _auditMissions = auditMissions.DtoResponses;
        }
    }

    private async Task FetchObjectives()
    {
        var result = await _objectiveService.GetObjectiveFullByAuditMissionIdAsync(_selectedAuditMissionId);

        if (result.Success)
        {
            // Create a new list and assign it to _objectiveFullViewModels
            _objectiveFullViewModels = [..result.DtoResponses];
            StateHasChanged();
        }
        else
        {
            _objectiveFullViewModels = [];
        }
    }

    private async void SelectedAuditMission(Guid id)
    {
        _selectedAuditMissionId = id;
        //TODO get the objectives of the selected audit mission and display them in the datagrid
        await FetchObjectives();
        StateHasChanged();
        //refresh the datagrid
    }

    private Task NavigateObjAction(ObjectiveActionViewModel objectiveAction)
    {
        _navigationManager.NavigateTo($"/objective-action/{objectiveAction.id}");
        return Task.CompletedTask;
    }

    private async void OpenActionRiskDialog(ObjectiveActionViewModel objectiveAction)
    {
        //g
        var actionRisks = objectiveAction.actionRisks;

        await _dialogService.OpenAsync<ObjActionDialog>
        ("Objective Action Risks", new Dictionary<string, object>()
            {
                { "ActionRisks", actionRisks },
                { "ObjectiveActionId", objectiveAction.id }
            },
            new DialogOptions() { Width = "800px", Height = "512px", Resizable = true, Draggable = true });
    }

    private async Task DeleteObjective(ObjectiveFullViewModel objective)
    {
        //open a dialog to confirm the deletion
        var resultConfirm = await _dialogService.Confirm(
            "Are you sure you want to delete the objective along with all dependencies ?", "Delete Objective", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultConfirm == null || resultConfirm.Value == false)
        {
            return;
        }

        else
        {
            var result = await _objectiveService.DeleteObjectiveAsync(Guid.Parse(objective.id));

            if (result.Success)
            {
                _objectiveFullViewModels.Remove(objective);
                _notificationService.Notify(NotificationSeverity.Success, "Success", "Objective deleted successfully", 3000);
                StateHasChanged();
            }
            else
            {
                _notificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete the objective", 3000);
            }
        }
    }

    private async Task OpenEditNameForm(ObjectiveFullViewModel objective)
    {
        await _dialogService.OpenAsync<EditObjectiveNameDialog>
        ("Edit Name", new Dictionary<string, object>()
            {
                { "Objective", objective },
                { "OnNameEdited", new EventCallback<string>(this, HandleNameEdited) },
                { "OnNameEditFailed", new EventCallback<string>(this, HandleNameEditFailed) }
            },
            new DialogOptions() { Width = "400px", Height = "200px", Resizable = false, Draggable = false });
    }

    private void HandleNameEdited(string message)
    {
        _notificationService.Notify(NotificationSeverity.Success, "Success", message, 3000);
        StateHasChanged();
    }

    private void HandleNameEditFailed(string message)
    {
        // Show a notification with the error message
        _notificationService.Notify(NotificationSeverity.Error, "Error", message, 3000);
        StateHasChanged();
    }

    private void NavigateAddObjective(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo($"/create-objective");
    }

    private void NavigateAddObjAction(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo($"/create-objective-action");
    }

    private void NavigateObjective(ObjectiveFullViewModel objective)
    {
        _navigationManager.NavigateTo($"/objective/{objective.id}");
    }
}