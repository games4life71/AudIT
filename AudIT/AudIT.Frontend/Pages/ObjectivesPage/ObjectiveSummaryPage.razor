@page "/objective/{ObjectiveId}"
@using Frontend.Components.EntityAcces
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.ObjectiveService
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityViewModels.Objective
@using Frontend.Components.ObjectiveAction

@using Frontend.EntityViewModels.ObjectiveAction
@using Frontend.Components.Objective
@using Frontend.Contracts.Abstract_Services.EntityAccesService
@using Frontend.Contracts.Abstract_Services.InstitutionsService
@using Frontend.Contracts.Abstract_Services.UserService
@using Frontend.EntityDtos.Institution
@using Frontend.EntityViewModels.EntityAccess
@using Frontend.EntityViewModels.User
@using Frontend.Services.AuthentificationServices
@using Orientation = Radzen.Orientation

@inject NavigationManager _navigationManager
@inject DialogService _dialogService
@inject IObjectiveService _objectiveService
@inject IAuditMissionService _auditMissionService
@inject NotificationService _notificationService


@inject IUserService _userService
@inject IInstitutionService _institutionService
@inject CustomAuthStateProvider customAuthState
@inject IEntityAccesService _entityAccessService

<RadzenStack Orientation="Orientation.Vertical">

    <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H4" class="rz-my-6" Text="@($"Summary for {_objective.name}")"></RadzenText>
        <RadzenLink Path=@($"/audit-mission/{_auditMission.Id}")>
            <RadzenText TextStyle="TextStyle.DisplayH6" Text="@($"Audit mission: {_auditMission.Name}")"></RadzenText>
        </RadzenLink>
    </RadzenStack>
    <RadzenCard Variant="Variant.Outlined">
        <RadzenTabs RenderMode="TabRenderMode.Client" TabPosition="TabPosition.Top">
            <Tabs>
                <RadzenTabsItem Icon="description" Text="Objective Actions">

                    <RadzenText Text="Objective Actions" class="rz-mb-6" TextStyle="TextStyle.DisplayH6"></RadzenText>
                    <RadzenDataGrid AllowSorting="true" Data="@_objective.objectiveActions">
                        <Columns>
                            <RadzenDataGridColumn Title="Objective Action Name" Property="name"/>
                            <RadzenDataGridColumn Sortable="true" Title="Last Modified Date" Property="lastModifiedDate"/>
                            <RadzenDataGridColumn Title="Action Risks Details" Sortable="false" Filterable="false">
                                <Template Context="objectiveAction">
                                    <RadzenButton Style="display: flex; align-self: center; justify-content: center ;"
                                                  Disabled="ReadAccess"
                                                  ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info"
                                                  Text="More details " Click="@(() => OpenActionRiskDialog(objectiveAction))">
                                    </RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Frozen="true" Title="Selected in auditing" Property="selected"></RadzenDataGridColumn>
                            <RadzenDataGridColumn Width="15%" Frozen="true" Sortable="false" Filterable="false" Title="">
                                <Template Context="objectiveAction">
                                    <RadzenButton Disabled="ReadAccess" Shade="Shade.Lighter" Icon="info" Style="display: flex; align-self: center; justify-content: center ;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Text="More details " Click="@(() => NavigateObjAction(objectiveAction))"></RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>

                    </RadzenDataGrid>

                </RadzenTabsItem>
                <RadzenTabsItem Text="Configure" Icon="settings">
                    <RadzenStack Orientation="Orientation.Horizontal">

                        <RadzenButton Disabled="ReadAccess" ButtonStyle="ButtonStyle.Info" Icon="assignment" Click="@(() => OpenEditNameForm(_objective))" Text="Edit Name"></RadzenButton>
                        <RadzenButton Disabled="ReadAccess" ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(() => DeleteObjective(_objective))" Text="Delete Objective"></RadzenButton>
                        <RadzenButton Disabled="ReadAccess" ButtonStyle="ButtonStyle.Warning" Icon="settings" Click="@(() => GiveAccess(_objective))" Text="Configure Access"></RadzenButton>


                    </RadzenStack>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenCard>
</RadzenStack>

@code {

    private bool ReadAccess = false;

    [Parameter] public string ObjectiveId { get; set; }

    private ObjectiveFullViewModel _objective { get; set; } = new ObjectiveFullViewModel();

    private BaseAuditMissionDto _auditMission { get; set; } = new BaseAuditMissionDto();

    private CancellationTokenSource _cancellationToken = new CancellationTokenSource();
}


@functions
{



    protected override async Task OnInitializedAsync()
    {
        await VerifyAcces();

        await FetchObjectiveAsync();

        if (_objective != null && !string.IsNullOrEmpty(_objective.auditMissionId))
        {
            await FetchAuditMissionAsync(_cancellationToken.Token);
        }
    }

    private async Task VerifyAcces()
    {
        var authState = await customAuthState.GetAuthenticationStateAsync();

        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            var userid = await customAuthState.GetUserIdFromTokenAsync();


            var accesList = await _entityAccessService.GetEntityAccesByUserIdAsync(userid.Item1);

            if (accesList.Success)
            {
                var access = accesList.DtoResponses.Find(
                    acces => acces.EntityId == Guid.Parse(ObjectiveId)
                             && acces.Type == EntityType.Objective);

                if (access == null)
                {
                    _notificationService.Notify(NotificationSeverity.Error, "Error", "You do not have access to this objective", 3000);
                 await   _cancellationToken.CancelAsync();
                    // _navigationManager.NavigateTo($"/");
                }
                else if (access.AccesType == AccesType.Read)
                {
                    ReadAccess = true;
                }

                else if (access.AccesType == AccesType.Write)
                {
                    ReadAccess = false;
                }
            }
        }



    }

    private async Task FetchObjectiveAsync()
    {
        var result = await _objectiveService.GetObjectiveWithActionsByIdAsync(Guid.Parse(ObjectiveId));

        if (result.Success)
        {
            if (result.DtoResponse != null) _objective = result.DtoResponse;

            StateHasChanged();
        }
        else
        {
            await  _cancellationToken.CancelAsync();
            _navigationManager.NavigateTo($"/");

        }
    }

    private async Task FetchAuditMissionAsync(CancellationToken cancellationToken)
    {
        var result = await _auditMissionService.GetAuditMissionById(Guid.Parse(_objective.auditMissionId));

        if (result.Success)
        {
            if (result.DtoResponse != null) _auditMission = result.DtoResponse;
            StateHasChanged();
        }
    }


    private async void OpenActionRiskDialog(ObjectiveActionViewModel objectiveAction)
    {
        //g
        var actionRisks = objectiveAction.actionRisks;

        await _dialogService.OpenAsync<ObjActionDialog>
        ("Objective Action Risks", new Dictionary<string, object>()
            {
                { "ActionRisks", actionRisks },
                { "ObjectiveActionId", objectiveAction.id }
            },
            new DialogOptions() { Width = "800px", Height = "512px", Resizable = true, Draggable = true });
    }

    private Task NavigateObjAction(ObjectiveActionViewModel objectiveAction)
    {
        _navigationManager.NavigateTo($"/objective-action/{objectiveAction.id}");
        return Task.CompletedTask;
    }

    private async Task OpenEditNameForm(ObjectiveFullViewModel objective)
    {
        await _dialogService.OpenAsync<EditObjectiveNameDialog>
        ("Edit Name", new Dictionary<string, object>()
            {
                { "Objective", objective },
                { "OnNameEdited", new EventCallback<string>(this, HandleNameEdited) },
                { "OnNameEditFailed", new EventCallback<string>(this, HandleNameEditFailed) }
            },
            new DialogOptions() { Width = "400px", Height = "200px", Resizable = false, Draggable = false });
    }

    private void HandleNameEdited(string message)
    {
        _notificationService.Notify(NotificationSeverity.Success, "Success", message, 3000);
        StateHasChanged();
    }

    private void HandleNameEditFailed(string message)
    {
        // Show a notification with the error message
        _notificationService.Notify(NotificationSeverity.Error, "Error", message, 3000);
        StateHasChanged();
    }
    private async Task DeleteObjective(ObjectiveFullViewModel objective)
    {
        //open a dialog to confirm the deletion
        var resultConfirm = await _dialogService.Confirm(
            "Are you sure you want to delete the objective along with all dependencies ?", "Delete Objective", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (resultConfirm == null || resultConfirm.Value == false)
        {
            return;
        }

        else
        {
            var result = await _objectiveService.DeleteObjectiveAsync(Guid.Parse(objective.id));

            if (result.Success)
            {
                _notificationService.Notify(NotificationSeverity.Success, "Success", "Objective deleted successfully", 3000);
                _navigationManager.NavigateTo($"/audit-mission/{_auditMission.Id}");
            }
            else
            {
                _notificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete the objective", 3000);
            }
        }
    }




    private async Task<List<UserWithIdViewModel>> FetchUsersByInstitution(Guid institutionId)
    {
        var result = await _userService.GetAllUsersByInstitutionIdAsync(institutionId);
        if (result.Success)
        {
            // Users = result.DtoResponses;
            return result.DtoResponses;
        }
        else
        {
            return [];
        }
    }






    private async Task<BaseInstitutionDto?> FetchInstitutionByUser(Guid userId)
    {
        var response = await _institutionService.GetinstitutionByUserIdAsync(userId);

        if (response.Success && response.DtoResponse != null)
        {
            return response.DtoResponse;
        }
        else
        {
            return null;
        }

        return null;
    }



    ///Filter the users and remove the current user
    private async Task FilterUsers(List<UserWithIdViewModel> users)
    {
        var currentUser = await customAuthState.GetUserIdFromTokenAsync();
        if (currentUser.Item2)
        {
            var currentFoundUser = users.Find(user => user.Id == currentUser.Item1);
            //users.Where(user => user.Id != currentUser.Item1);
            if (currentFoundUser != null) users.Remove(currentFoundUser);
        }
    }

    private async Task GiveAccess(ObjectiveFullViewModel objective)
    {
        var userid = await customAuthState.GetUserIdFromTokenAsync();

        if (userid.Item2 && userid.Item1 != null)
        {
            var institution = await FetchInstitutionByUser(userid.Item1);
            if (institution != null)
            {
                var users = await FetchUsersByInstitution(institution.Id);
                await FilterUsers(users);

                _dialogService.Open<CreateEntityAccesComponent>(
                    "Give access ",
                    new Dictionary<string, object>
                    {
                        { "EntityId", Guid.Parse(objective.id) },
                        { "Users", users },
                        { "EntityType", EntityType.Objective },
                        { "EntityName", objective.name }
                    },
                    new DialogOptions { Width = "50%", Height = "70%" }
                );
            }
        }


    }

}