@page "/recommendations"
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.CurrentUserAuditMissionService
@using Frontend.Contracts.Abstract_Services.RecommendationService
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityDtos.Recommendation
@using Frontend.EntityViewModels.CurrentUserAuditMissionViewModel
@using Frontend.EntityViewModels.Recommendation
@using Microsoft.AspNetCore.WebUtilities
@using Orientation = Radzen.Orientation
@using Radzen.Blazor
@using Radzen.Blazor
@inject NotificationService _notificationService
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IRecommendationService _recommendationService
@inject ICurrentUserAuditMissionService _currentUserAuditMissionService
@inject IAuditMissionService _auditMissionService

<RadzenCard Variant="Variant.Outlined">
    <RadzenStack Orientation="Orientation.Vertical">

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenText Text="Recommendations" TextStyle="TextStyle.DisplayH5"/>
            @if (_auditMission.Id != Guid.Empty)
            {
            <RadzenLink Path="@($"/audit-mission/{_auditMission.Id}")">
                <RadzenText Text="@($"Selected Audit Mission: {_auditMission.Name}")"></RadzenText>
            </RadzenLink>
            }
            else
            {
            <RadzenLink Path="@($"/audit-missions")">
                <RadzenText Text="Please select an audit mission "></RadzenText>
            </RadzenLink>
            }

        </RadzenStack>
        <RadzenDataGrid
            Data="_recommendations"
            TItem="BaseRecommendationViewModel">
            <Template Context="recommendation">
                <RadzenTabs TabPosition="TabPosition.Top">
                    <Tabs>
                        <RadzenTabsItem Text="Basic Information">
                            <RadzenRow Style="width: 85%" JustifyContent="JustifyContent.SpaceEvenly">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Name"/>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.Description" ReadOnly="@(!EditPressed)"/>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Problem"/>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.Problem" ReadOnly="@(!EditPressed)"/>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Cause"/>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.Cause"ReadOnly="@(!EditPressed)"/>
                                    </RadzenStack>
                                </RadzenStack>

                                <RadzenStack Orientation="Orientation.Vertical">

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Description"></RadzenLabel>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.RecommendationDescription"ReadOnly="@(!EditPressed)"></RadzenTextArea>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Consequences"></RadzenLabel>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.Consequence" ReadOnly="@(!EditPressed)"></RadzenTextArea>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Aditional Findings"></RadzenLabel>
                                        <RadzenTextArea Style="width: 150%" @bind-Value="recommendation.AditionalFindings" ReadOnly="@(!EditPressed)"></RadzenTextArea>
                                    </RadzenStack>

                                </RadzenStack>
                            </RadzenRow>
                            <RadzenRow JustifyContent="JustifyContent.Center" class="rz-my-6">
                                <RadzenStack Orientation="Orientation.Horizontal">

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Due Date"></RadzenLabel>
                                        <RadzenDatePicker @bind-Value="recommendation.DueDate" ReadOnly="@(!EditPressed)"></RadzenDatePicker>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenLabel Text="Status"></RadzenLabel>
                                        <RadzenDropDown
                                            ReadOnly="@(!EditPressed)"
                                            TValue="String"
                                            Data="_statusList"
                                            @bind-Value="@selectedStatus"/>


                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenRow>

                            <RadzenRow JustifyContent="JustifyContent.Center">
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Text="Edit" Visible="@(!EditPressed)" Click="@(() => ShowOtherButtons(recommendation))"></RadzenButton>
                                    <RadzenButton Click="@(() => CancelChanges(recommendation))" ButtonStyle="ButtonStyle.Secondary" Visible="EditPressed" Text="Cancel"/>
                                    <RadzenButton Click="@(() => SumbitChanges(recommendation))" ButtonStyle="ButtonStyle.Success" Visible="EditPressed" Text="Save"/>
                                </RadzenStack>
                            </RadzenRow>


                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Settings" Icon="settings">
                            <RadzenStack JustifyContent="JustifyContent.Start" Orientation="Orientation.Horizontal">

                                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Text="Objective"></RadzenButton>

                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="notification_add" Text="Notify institution"/>

                                <RadzenButton Click="@(() => DeleteRecommendation(recommendation))" Icon="delete" ButtonStyle="ButtonStyle.Danger" Text="Delete Recommendation"/>

                            </RadzenStack>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </Template>

            <Columns>
                <RadzenDataGridColumn Title="Description" Property="Description"/>
                <RadzenDataGridColumn Title="Due Date " Property="DueDate"/>
                <RadzenDataGridColumn Title="Status" Property="Status"/>


            </Columns>


        </RadzenDataGrid>
        <RadzenButton Text="Add a new recommendation" Click="@AddNewRecommendation" ButtonStyle="ButtonStyle.Dark"></RadzenButton>

    </RadzenStack>
</RadzenCard>


@code {

    private List<BaseRecommendationViewModel> _recommendations = [];

    private BaseRecommendationViewModel _originalRecommendation;

    List<string> _statusList = [..Enum.GetNames(typeof(Status))];

    private Guid _auditMissionId = Guid.Empty;

    private bool EditPressed = false;

    private string selectedStatus = "";

    private CurrentUserAuditMissionViewModel _currentUserAuditMission { get; set; } = new CurrentUserAuditMissionViewModel();
    private BaseAuditMissionDto _auditMission { get; set; } = new BaseAuditMissionDto();

}

@functions
{

    public async Task GetCurrentUserAuditMissionAsync()
    {
        var result = await _currentUserAuditMissionService.GetCurrentUserAuditMissionAsync();

        if (result is { Success: true, DtoResponse: not null }) _currentUserAuditMission = result.DtoResponse;
        var auditMissionResult = await _auditMissionService.GetAuditMissionById(_currentUserAuditMission.AuditMissionId);

        if (auditMissionResult is { Success: true, DtoResponse: not null }) _auditMission = auditMissionResult.DtoResponse;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserAuditMissionAsync();
        await FetchAuditMissionParameter();
        await FetchRecommendations();
    }

    private async Task FetchAuditMissionParameter()
    {
        var uri = new Uri(_navigationManager.Uri);

        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("auditMissionId", out var auditMissionId))
        {
            if (auditMissionId.Count > 1)
            {
                throw new InvalidOperationException("Multiple auditMissionId query parameters found.");
            }

            _auditMissionId = Guid.Parse(auditMissionId.FirstOrDefault());
        }
        else
        {
            //get the current user audit mission

            await FetchUserAuditMission();
        }
    }

    private async Task FetchUserAuditMission()
    {
        var response = await _currentUserAuditMissionService.GetCurrentUserAuditMissionAsync();

        if (response.Success)
        {
            if (response.DtoResponse != null) _auditMissionId = response.DtoResponse.AuditMissionId;
        }
    }

    private async Task FetchRecommendations()
    {
        if (_auditMissionId != Guid.Empty)
        {
            var response = await _recommendationService.FindAllByAuditMissionIdAsync(_auditMissionId);

            if (response.Success)
            {
                _recommendations = response.DtoResponses;
            }
        }
    }


    private void ShowOtherButtons(BaseRecommendationViewModel recommendation)
    {
        _originalRecommendation = new BaseRecommendationViewModel
        {
            Id = recommendation.Id,
            Description = recommendation.Description,
            DueDate = recommendation.DueDate,
            Status = recommendation.Status,
            ObjectiveAction = recommendation.ObjectiveAction,
            Problem = recommendation.Problem,
            AditionalFindings = recommendation.AditionalFindings,
            Cause = recommendation.Cause,
            Consequence = recommendation.Consequence,
            RecommendationDescription = recommendation.RecommendationDescription
        };

        EditPressed = !EditPressed;
    }

    private async Task SumbitChanges(BaseRecommendationViewModel recommendation)
    {
        var responseConfirm = await _dialogService.Confirm("Are you sure you want to save the changes?", "Save Changes");

        if (responseConfirm.Value)
        {
            var commmand = new UpdateRecommendationDto();

            commmand.Description = recommendation.Description;
            commmand.Problem = recommendation.Problem;
            commmand.Cause = recommendation.Cause;
            commmand.RecommendationDescription = recommendation.RecommendationDescription;
            commmand.Consequence = recommendation.Consequence;
            commmand.AditionalFindings = recommendation.AditionalFindings;
            commmand.DueDate = recommendation.DueDate;
            commmand.Id = recommendation.Id;
            if (!String.IsNullOrEmpty(selectedStatus))
            {
                commmand.Status = (Status)Enum.Parse(typeof(Status), selectedStatus);
            }




            var response = await _recommendationService.UpdateRecommendationAsync(commmand);

            if (response.Success)
            {
                _notificationService.Notify(NotificationSeverity.Success, "Success", "Recommendation updated successfully");
                await FetchRecommendations();
                EditPressed = false;
            }
            else
            {
                _notificationService.Notify(NotificationSeverity.Error, "Error", response.Message);
            }
        }
    }

    private Task CancelChanges(BaseRecommendationViewModel recommendation)
    {
        recommendation.Id = _originalRecommendation.Id;
        recommendation.Description = _originalRecommendation.Description;
        recommendation.DueDate = _originalRecommendation.DueDate;
        recommendation.Status = _originalRecommendation.Status;
        recommendation.ObjectiveAction = _originalRecommendation.ObjectiveAction;
        recommendation.Problem = _originalRecommendation.Problem;
        recommendation.AditionalFindings = _originalRecommendation.AditionalFindings;
        recommendation.Cause = _originalRecommendation.Cause;
        recommendation.Consequence = _originalRecommendation.Consequence;
        recommendation.RecommendationDescription = _originalRecommendation.RecommendationDescription;

        EditPressed = false;

        return Task.CompletedTask;
    }

    private void AddNewRecommendation(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo($"/add-recommendation");
    }

    private async Task DeleteRecommendation(BaseRecommendationViewModel recommendation)
    {
        var responseConfirm = await _dialogService.Confirm("Are you sure you want to delete this recommendation?", "Delete Recommendation");

        if (responseConfirm.Value)
        {
            var response = await _recommendationService.DeleteRecommendationAsync(recommendation.Id);

            if (response.Success)
            {
                _notificationService.Notify(NotificationSeverity.Success, "Success", "Recommendation deleted successfully");
                await FetchRecommendations();
                StateHasChanged();
            }
            else
            {
                _notificationService.Notify(NotificationSeverity.Error, "Error", response.Message);
            }
        }
    }
}