@page "/view-granted-access"
@using Frontend.Contracts.Abstract_Services.EntityAccesService
@using Frontend.EntityViewModels.EntityAccess
@using Frontend.Services.AuthentificationServices
@using Orientation = Radzen.Orientation

@inject IEntityAccesService _accesService
@inject CustomAuthStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenText TextStyle="TextStyle.H5" Text="Access control list"/>

    <RadzenDataGrid
        Data="_accesList"
        TItem="EntityAccessWithUserInfoViewModel"
        AllowFiltering="true"
        AllowPaging="true"
        PageSize="10"
        AllowSorting="true"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn Width="20%" Title="Type" Property="Type"/>
            <RadzenDataGridColumn Width="20%" Title="Access type" Property="AccesType"/>
            <RadzenDataGridColumn>
                <Template Context="access">
                    <RadzenStack Orientation="Orientation.Horizontal">

                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenText TextStyle="TextStyle.Overline" Text="User"/>
                            <RadzenText Text="@access.User.Username"/>
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenText TextStyle="TextStyle.Overline" Text="Email"/>
                            <RadzenText Text="@access.User.FirstEmail"/>
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenText TextStyle="TextStyle.Overline" Text="Functie"/>
                            <RadzenText Text="@access.User.Functie"/>
                        </RadzenStack>

                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn>
                <Template Context="data">
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@(()=>NavigateEntity(data))" Icon="visibility" Text="View entity"></RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Remove Access" Icon="delete" Click="@(()=>RemoveAcces(data))"></RadzenButton>
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
</RadzenStack>

@code {
    private List<EntityAccessWithUserInfoViewModel> _accesList = [];
}

@functions
{
    protected override async  Task OnInitializedAsync()
    {
        await GetAccesByUser();
    }

    private async Task GetAccesByUser()
    {
        var user = await _authStateProvider.GetAuthenticationStateAsync();

        var UserId = await _authStateProvider.GetUserIdFromTokenAsync();

        if (UserId.Item2 && UserId.Item1 != null)
        {
            var response = await _accesService.GetAccesGrantedByUserAsync();

            if (response.Success)
            {
                // Do something
                //filter the acces to not contain the user that is logged in
                // _accesList = response.DtoResponses.Where(x => x.UserId != UserId.Item1.ToString()).ToList();
                _accesList = response.DtoResponses.Where(x => x.UserId != x.GrantedByUserId).ToList();
                // _accesList = response.DtoResponses;
            }
        }
    }

    private async  Task NavigateEntity(EntityAccessWithUserInfoViewModel entity)
    {
        if (entity.Type == EntityType.Objective)
        {
            _navigationManager.NavigateTo($"/objective/{entity.EntityId}");
        }

        if (entity.Type == EntityType.AuditMission)
        {
            _navigationManager.NavigateTo($"/audit-mission/{entity.EntityId}");
        }


    }

    private async  Task RemoveAcces(EntityAccessWithUserInfoViewModel data)
    {
        var response = await _accesService.RemoveEntityAccesAsync(data.Id);

        if (response.Success)
        {
            _notificationService.Notify(NotificationSeverity.Success, "Success", "Access removed successfully");
            _accesList.Remove(data);
            await GetAccesByUser();
            StateHasChanged();
        }
    }
}