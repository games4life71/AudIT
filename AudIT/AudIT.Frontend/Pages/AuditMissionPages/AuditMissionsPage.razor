@page "/audit-missions"
@using Frontend.Components.EntityAcces
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.DepartmentService
@using Frontend.Contracts.Abstract_Services.EntityAccesService
@using Frontend.Contracts.Abstract_Services.InstitutionsService
@using Frontend.Contracts.Abstract_Services.UserService
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityDtos.Department
@using Frontend.EntityDtos.Institution
@using Frontend.EntityDtos.Misc
@using Frontend.EntityViewModels.EntityAccess
@using Frontend.EntityViewModels.User
@using Frontend.Services.AuthentificationServices
@using Orientation = Radzen.Orientation
@* <h3>AuditMissions</h3> *@

@inject NavigationManager NavigationManager
@inject IAuditMissionService auditMissionService
@inject IDepartmentService departmentService
@inject CustomAuthStateProvider customAuthState

@inject DialogService _dialogService
@inject IEntityAccesService entityAccesService
@inject IUserService _userService
@inject IInstitutionService _institutionService

@if (isAuthenticated)
{
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenDataGrid Data="@_auditMissionsDto" AllowSorting="true" AllowFiltering="true">

                <Columns>

                    @* <RadzenDataGridColumn Property="Id" Title="Id"></RadzenDataGridColumn> *@
                    <RadzenDataGridColumn Property="Name" Title="Name"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="DepartmentName" Title="Department Name">

                        <Template Context="data">
                            <div @onclick="() => DepartmentCellClicked(data)">
                                @data.DepartmentName
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Status" Title="Status"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="LastModifiedDate" Title="Last Modified"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="15%" Frozen="true" Sortable="false" Filterable="false" TItem="AuditMissionWithDepartmentName" Title="">
                        <Template Context="auditMission">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenButton Icon="info" Style="display: flex; align-self: center; justify-content: center ;" ButtonStyle="ButtonStyle.Secondary" Text="More details " Click="@(() => ButtonClicked(auditMission))"></RadzenButton>
                                <RadzenButton  Icon="key" Click="@(() => GiveAccess(auditMission))" ButtonStyle="ButtonStyle.Warning" Text="Give access"></RadzenButton>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
            <RadzenButton Click="@(args => NavigationManager.NavigateTo("/create-mission"))" ButtonStyle="ButtonStyle.Dark" Icon="add" Text="Add new Audit Mission"></RadzenButton>
        </RadzenStack>
    </RadzenCard>
}
@* else if(!isAuthenticated) *@
@* { *@
@*  //display a loading spinner *@
@*     <h1>Not authenticated</h1> *@
@* } *@
else
{
    <RadzenPanel Style="justify-content: center; align-content: center;">
        <RadzenLabel Text="Loading..."/>
        <RadzenProgressBar Height="10px"/>
    </RadzenPanel>
}


@code {

    // RadzenDataGrid<AuditMissionWithDepartmentName> grid;
    string? Message { get; set; }
    string? Name { get; set; }
    private BaseDepartmentDto _departmentDto;
    private List<AuditMissionWithDepartmentName> _auditMissionsDto = [];
    bool isAuthenticated;


    protected override async Task OnInitializedAsync()
    {
        var authState = await customAuthState.GetAuthenticationStateAsync();
        if (authState.User.Identity is { IsAuthenticated: true })
        {
            isAuthenticated = true;
        }
        else
        {
            isAuthenticated = false;
            NavigationManager.NavigateTo("/login");
            return;
        }


        var result = await auditMissionService.GetAuditMissionByOwnerId();

        if (!result.Success)
        {
            // Message = "Failed to load audit missions";
            Message = result.Message;
            // _auditMissionsDto = result.DtoResponses;
        }

        else
        {
            Message = result.DtoResponses[0].Name;

            var tempAuditMissionsDto = new List<AuditMissionWithDepartmentName>();
            _auditMissionsDto = [];
            foreach (var auditMissionDto in result.DtoResponses)
            {
                var departmentResult = await departmentService.GetDepartmentByIdAsync(auditMissionDto.DepartmentId);
                string? departmentName = "";
                if (!departmentResult.Success)
                {
                    departmentName = "Department not found";
                }
                else
                {
                    if (departmentResult.DtoResponse?.Name != null) departmentName = departmentResult.DtoResponse?.Name;
                }

                var newAuditMission = new AuditMissionWithDepartmentName(
                    auditMissionDto.Id,
                    auditMissionDto.Name,
                    auditMissionDto.UserId,
                    auditMissionDto.DepartmentId,
                    departmentName,
                    auditMissionDto.LastModifiedDate,
                    auditMissionDto.Status
                );

                _auditMissionsDto.Add(newAuditMission);
            }

            // _auditMissionsDto = tempAuditMissionsDto;
        }
    }

    private Task GoHome()
    {
        NavigationManager.NavigateTo("/");
        return Task.CompletedTask;
    }

    private Task ButtonClicked(AuditMissionWithDepartmentName auditMission)
    {
        // Console.WriteLine($"Button clicked for order {order.OrderID}");
        NavigationManager.NavigateTo($"/audit-mission/{auditMission.Id}");
        return Task.CompletedTask;
    }


    private Task DepartmentCellClicked(AuditMissionWithDepartmentName data)
    {
        Console.WriteLine($"Department cell clicked for department {data.DepartmentName}");
        return Task.CompletedTask;
    }

    private async Task<List<UserWithIdViewModel>> FetchUsersByInstitution(Guid institutionId)
    {
        var result = await _userService.GetAllUsersByInstitutionIdAsync(institutionId);
        if (result.Success)
        {
            // Users = result.DtoResponses;
            return result.DtoResponses;
        }
        else
        {
            return [];
        }
    }

    private async Task<BaseInstitutionDto?> FetchInstiution(Guid auditmissionId)
    {
        var result = await _institutionService.GetInstitutionByAuditMissionIdAsync(auditmissionId);

        if (result.Success)
        {
            if (result.DtoResponse != null) return result.DtoResponse;
        }
        else
        {
            return null;
        }

        return null;
    }

    ///Filter the users and remove the current user
    private async Task FilterUsers(List<UserWithIdViewModel> users)
    {
        var currentUser = await customAuthState.GetUserIdFromTokenAsync();
        if (currentUser.Item2)
        {
            var currentFoundUser = users.Find(user => user.Id == currentUser.Item1);
            //users.Where(user => user.Id != currentUser.Item1);
            if (currentFoundUser != null) users.Remove(currentFoundUser);
        }
    }

    private async Task GiveAccess(AuditMissionWithDepartmentName auditMission)
    {
        var institution = await FetchInstiution(auditMission.Id);
        if (institution != null)
        {
            var users = await FetchUsersByInstitution(institution.Id);
            await FilterUsers(users);

            _dialogService.Open<CreateEntityAccesComponent>(
                "Give access to this entity",
                new Dictionary<string, object>
                {
                    { "EntityId", auditMission.Id },
                    { "Users", users },
                    { "EntityType", EntityType.AuditMission },
                    { "EntityName", auditMission.Name }
                },
                new DialogOptions { Width = "50%", Height = "70%" }
            );
        }
    }

}