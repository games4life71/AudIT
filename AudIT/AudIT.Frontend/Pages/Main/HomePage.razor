@page "/"
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.CurrentUserAuditMissionService
@using Frontend.Contracts.Abstract_Services.Notification
@using Frontend.Contracts.Abstract_Services.ObjectiveService
@using Frontend.Contracts.Abstract_Services.RecommendationService
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityDtos.Notification
@using Frontend.EntityViewModels.CurrentUserAuditMissionViewModel
@using Frontend.EntityViewModels.Notification
@using Frontend.EntityViewModels.Objective
@using Frontend.EntityViewModels.Recommendation
@using Frontend.Services.AuthentificationServices
@using Orientation = Radzen.Orientation
@using Frontend.Components

@inject IAuditNotificationService _auditNotificationService
@inject IObjectiveService _objectiveService
@inject NavigationManager _navigationManager
@inject ICurrentUserAuditMissionService _currentUserAuditMissionService
@inject CustomAuthStateProvider _authStateProvider
@inject IAuditMissionService _auditMissionService
@inject IRecommendationService _recommendationService


<RadzenStack Orientation="Orientation.Vertical">
    @if (isLoading)
    {
        <LoadingComponent/>
    }
    else if (isAuditor)
    {
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenText Text="@($"Welcome, {currentUserName} !")" TextStyle="TextStyle.DisplayH5"/>
            @if (_auditMission.Id != Guid.Empty)
            {
                <RadzenLink Path="@($"/audit-mission/{_auditMission.Id}")">
                    <RadzenText Text="@($"Selected Audit Mission: {_auditMission.Name}")"></RadzenText>
                </RadzenLink>
            }
            else
            {
                <RadzenLink Path="@($"/audit-missions")">
                    <RadzenText Text="No audit mission currently selected "></RadzenText>
                </RadzenLink>
            }

        </RadzenStack>

        @*Audit Mission and Objectives tables *@
        <RadzenCard class="rz-mt-10" Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Horizontal" class="rz-mt-4" JustifyContent="JustifyContent.SpaceAround">

                @*Audit Mission table and search*@
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center" Text="Your active Audit Missions: "></RadzenText>
                    <RadzenText Text="@($"Count:{_auditMissions.Count.ToString()}")"></RadzenText>
                    <RadzenDataGrid
                        AllowPaging="true"
                        PageSize="5"
                        AllowColumnResize="true"
                        Data="_auditMissions"
                        SelectionMode="DataGridSelectionMode.Single"
                        TItem="BaseAuditMissionDto"
                        AllowFiltering="true"
                        AllowSorting="true"
                        ValueChanged="@((value) => AuditMissionSelected(value))">
                        <Columns>
                            <RadzenDataGridColumn Title="Name" Property="Name"/>
                            <RadzenDataGridColumn Title="Status" Property="Status"/>
                            <RadzenDataGridColumn Title="Last Modified Date" Property="LastModifiedDate"/>
                            <RadzenDataGridColumn>
                                <Template Context="auditMission">
                                    <RadzenStack JustifyContent="JustifyContent.Center" Orientation="Orientation.Vertical">
                                        <RadzenButton Click="@(() => NavigateAuditMission(auditMission))" ButtonStyle="ButtonStyle.Secondary" Text="Details"></RadzenButton>
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>

                    </RadzenDataGrid>

                </RadzenStack>

                @*Objectives table and search*@
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center" Text="Active Objectives: "></RadzenText>


                    <RadzenText Text="@($"Count:{_objectives.Count.ToString()}")"></RadzenText>

                    <RadzenDataGrid
                        Data="_objectives"
                        TItem="BaseObjectiveViewModel"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowColumnResize="true"
                        PageSize="5"
                        AllowSorting="true">

                        <Columns>
                            <RadzenDataGridColumn Title="Name" Property="Name"/>
                            <RadzenDataGridColumn>
                                <Template Context="objective">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenButton Click="@(() => NavigateObjective(objective))" ButtonStyle="ButtonStyle.Secondary" Text="Details"></RadzenButton>
                                    </RadzenStack>

                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>


                    </RadzenDataGrid>
                </RadzenStack>

            </RadzenStack>
        </RadzenCard>

        @*Recent Recommendations table*@
        <RadzenCard class="rz-my-6" Variant="Variant.Outlined">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenText class="rz-my-4" TextStyle="TextStyle.H5" TextAlign="TextAlign.Center" Text="Recent Recommendations"></RadzenText>
                <RadzenDataGrid
                    Data="_recommendations"
                    AllowPaging="true"
                    PageSize="5"
                    AllowColumnResize="true"
                    TItem="BaseRecommendationViewModel"
                    AllowFiltering="true"
                    AllowSorting="true">

                    <Columns>
                        <RadzenDataGridColumn Title="Name" Property="Description"/>
                        <RadzenDataGridColumn Title="Status" Property="Status"/>
                        <RadzenDataGridColumn Title="Due Date" Property="DueDate"/>
                        <RadzenDataGridColumn>
                            <Template Context="recommendation">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenButton Click="@(() => NavigateRecommendation(recommendation))" ButtonStyle="ButtonStyle.Secondary" Text="Details"/>
                                </RadzenStack>

                            </Template>
                        </RadzenDataGridColumn>


                    </Columns>

                </RadzenDataGrid>
                <RadzenButton Click="@NavigateRecommendations" ButtonStyle="ButtonStyle.Dark" Text="See more ..."></RadzenButton>
            </RadzenStack>
        </RadzenCard>
    }
    else if (isVerified)
    {
        <RadzenStack Orientation="Orientation.Vertical">

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenText Text="@($"Welcome, {currentUserName} !")" TextStyle="TextStyle.DisplayH5"/>
            </RadzenStack>

            <RadzenCard Variant="Variant.Outlined">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText TextStyle="TextStyle.H5" Text="Notifications for your institution: "></RadzenText>
                    <RadzenDataGrid
                        Data="_notifications"
                        @ref="_notificationDataGrid"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowSorting="true"
                        PageSize="5"
                        AllowColumnResize="true"
                        TItem="BaseNotificationViewModel">
                        <Columns>
                            <RadzenDataGridColumn Title="Title" Property="Title"/>
                            <RadzenDataGridColumn Title="Description" Property="AdditionalInfo"/>
                            <RadzenDataGridColumn Title="Last Modified Date" Property="LastModifiedDate"/>
                            <RadzenDataGridColumn Title="Read">
                                <Template Context="notification">
                                    @if (notification.IsRead.Value != null)
                                    {
                                        <RadzenCheckBox Value="notification.IsRead.Value" Disabled="true"/>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn>
                                <Template Context="notification">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@(args => _navigationManager.NavigateTo("/view-recommendations"))" Text="Go to recommendation"></RadzenButton>
                                        @if (notification.IsRead != null && notification.IsRead.Value)
                                        {
                                            <RadzenButton Click="@(() => DeleteNotification(notification))" ButtonStyle="ButtonStyle.Danger" Text="Delete"></RadzenButton>
                                        }
                                        else
                                        {
                                            <RadzenButton Click="@(() => MarkNotificationAsRead(notification))" ButtonStyle="ButtonStyle.Success" Text="Mark as read"></RadzenButton>
                                        }

                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>


                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    }
    else
    {
        _navigationManager.NavigateTo("/login");
    }

</RadzenStack>


@code {

    private CurrentUserAuditMissionViewModel _currentUserAuditMission { get; set; } = new CurrentUserAuditMissionViewModel();
    private BaseAuditMissionDto _auditMission { get; set; } = new BaseAuditMissionDto();

    private string currentUserName { get; set; }

    private List<BaseAuditMissionDto> _auditMissions { get; set; } = [];

    private List<BaseObjectiveViewModel> _objectives { get; set; } = [];

    private List<BaseRecommendationViewModel> _recommendations { get; set; } = [];

    private List<BaseNotificationViewModel> _notifications { get; set; } = [];
    bool isAuthenticated = false;
    bool isVerified = false;
    bool isAuditor = false;

    private List<ClaimResponse> _claims { get; set; } = [];

    private bool isLoading = true;
    private RadzenDataGrid<BaseNotificationViewModel> _notificationDataGrid;
}

@functions
{

    private async Task FetchUserClaims()
    {
        isLoading = true;

        var authState = await _authStateProvider.GetAuthenticationStateAsync();

        isAuthenticated = authState.User.Identity is { IsAuthenticated: true };
        isVerified = authState.User.IsInRole("Verified");
        isAuditor = authState.User.IsInRole("Auditor");

        _claims = _authStateProvider.GetClaims(authState);

        isLoading = false;
    }

    private async Task FetchNotifications()
    {
        ClaimResponse? first = null;
        foreach (var x in _claims)
        {
            if (x.Type == "Institution")
            {
                first = x;
                break;
            }
        }

        if (first is not null)
        {
            var response = await _auditNotificationService.GetNotificationsByInstitutionIdAsync(Guid.Parse(first.Value));

            if (response is { Success: true, DtoResponses: not null })
            {
                var temp = response.DtoResponses
                    .Where(x => x.NotificationType == NotificationType.FromAuditor)
                    .OrderByDescending(x => x.LastModifiedDate)
                    .ToList();
                _notifications = temp;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchUserClaims();
        var user = await _authStateProvider.GetAuthenticationStateAsync();
        if (isAuditor)
        {
            await GetCurrentUserAuditMissionAsync();


            await FetchAuditMissions();
            await FetchRecommendations();
        }
        else
        {
            await FetchNotifications();
        }

        if (user.User.Identity.IsAuthenticated)
        {
            currentUserName = user.User.Identity.Name;
        }
    }


    private async Task GetCurrentUserAuditMissionAsync()
    {
        var result = await _currentUserAuditMissionService.GetCurrentUserAuditMissionAsync();

        if (result is { Success: true, DtoResponse: not null }) _currentUserAuditMission = result.DtoResponse;
        var auditMissionResult = await _auditMissionService.GetAuditMissionById(_currentUserAuditMission.AuditMissionId);

        if (auditMissionResult is { Success: true, DtoResponse: not null }) _auditMission = auditMissionResult.DtoResponse;
    }


    private async Task FetchAuditMissions()
    {
        var result = await _auditMissionService.GetAuditMissionByOwnerId();
        if (result is { Success: true, DtoResponses: not null })
        {
            _auditMissions = result.DtoResponses;
        }
    }

    private async Task FetchRecommendations()
    {
        var result = await _recommendationService.GetAllRecentByUserAsync();

        if (result is { Success: true, DtoResponses: not null })
        {
            _recommendations = result.DtoResponses;
        }
    }

    private Task NavigateAuditMission(BaseAuditMissionDto auditMission)
    {
        _navigationManager.NavigateTo($"/audit-mission/{auditMission.Id}");
        return Task.CompletedTask;
    }

    private async Task AuditMissionSelected(IList<BaseAuditMissionDto> value)
    {
        if (value.Any())
        {
            //fetch the objectives of the selected audit mission

            var response = await _objectiveService.GetObjectivesByAuditMissionIdAsync(value[0].Id);

            if (response.Success)
            {
                _objectives = response.DtoResponses;

            }
            else
            {
                //navigate to the objectives page
                _objectives = response.DtoResponses;
                _objectives = [];
            }
        }
    }

    private Task NavigateObjective(BaseObjectiveViewModel objective)
    {
        _navigationManager.NavigateTo($"/objective/{objective.Id}");
        return Task.CompletedTask;
    }


    private Task NavigateRecommendation(BaseRecommendationViewModel recommendation)
    {
        _navigationManager.NavigateTo($"/recommendations");
        return Task.CompletedTask;
    }

    private void NavigateRecommendations(MouseEventArgs obj)
    {
        _navigationManager.NavigateTo($"/recommendations");
    }

    private async Task DeleteNotification(BaseNotificationViewModel notification)
    {
        var response = await _auditNotificationService.DeleteNotificationAsync(notification.Id);

        if (response.Success)
        {
            await FetchNotifications();
            await _notificationDataGrid.Reload();
        }
    }

    private async Task MarkNotificationAsRead(BaseNotificationViewModel notification)
    {
        var response = await _auditNotificationService.SetNotificationReadAsync(notification.Id);

        if (response.Success)
        {
            await FetchNotifications();
            await _notificationDataGrid.Reload();
        }
    }
}