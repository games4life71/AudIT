@using Frontend.Components
@using Frontend.Contracts.Abstract_Services.AuditMissionService
@using Frontend.Contracts.Abstract_Services.CurrentUserAuditMissionService
@using Frontend.Contracts.Abstract_Services.ObjectiveService
@using Frontend.Contracts.Services
@using Frontend.EntityDtos.AuditMission
@using Frontend.EntityViewModels.Objective
@using Frontend.Components.Activity
@using Frontend.Components.Export
@using Frontend.Contracts.Abstract_Services.Notification
@using Frontend.Contracts.Abstract_Services.RecommendationService
@using Frontend.EntityDtos.Notification
@using Frontend.EntityViewModels.Notification
@using Frontend.Services.AuthentificationServices
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor.Rendering
@using Orientation = Radzen.Orientation
@inherits LayoutComponentBase


@inject TooltipService _tooltipService
@inject IAuditNotificationService _auditNotificationService
@inject ICurrentUserChangedMissionService _currentUserChangedMissionService
@inject IObjectiveService _objectiveService
@inject CustomAuthStateProvider customAuthState
@inject ICurrentUserAuditMissionService _currentAuditMissionService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject IAuditMissionService _auditMissionService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader Style="display: flex; justify-content: space-between;">


        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)"/>
            <RadzenLink Path="/">
                <RadzenLabel Text="AudIT App"/>
            </RadzenLink>


        </RadzenStack>

        <RadzenStack class="rz-mx-12" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">


            <RadzenMenu @ref=@notificationMenu Responsive="true">
                <RadzenMenuItem Icon="dashboard" Text="Menu">
                    <RadzenMenuItem Path="/profile" Icon="account_circle" Text="Profile"></RadzenMenuItem>
                    <RadzenMenuItem Click="@DisplayPopup" Icon="markunread_mailbox" Text="Notifications"> </RadzenMenuItem>


                </RadzenMenuItem>

                @code{

                    private int CountUnreadNotifications()
                    {
                        return Notifications.Count(x => x.IsRead == false);
                    }

                }

                <Popup
                    Style="display:none;position:absolute; right: 0;  height:300px;width:600px;padding:5px;"
                    @ref="notificationPopup" Open="@OnNotificationPopupOpen">
                    @if (CountUnreadNotifications() == 0)
                    {
                        <RadzenCard Variant="Variant.Filled">
                            <RadzenCard Variant="Variant.Outlined">
                                <RadzenText TextAlign="TextAlign.Center" Text="No notifications"></RadzenText>
                            </RadzenCard>
                        </RadzenCard>
                    }
                    else
                    {
                        <RadzenDataList Style="height:150%;overflow:auto;" AllowPaging="true" PageSize="3" Data="Notifications">
                            <Template Context="notification">
                                @if (notification.IsRead != null && notification.IsRead.Value == false)
                                {
                                    <RadzenCard Variant="Variant.Outlined">

                                        <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">


                                            <RadzenText TextStyle="TextStyle.Overline" Text="@notification.Title"></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Overline" Text="@notification.AdditionalInfo"></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Overline" Text="@notification.Institution.Name"></RadzenText>

                                            @if (notification.IsRead != null && notification.IsRead.Value)
                                            {
                                                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Read" Variant="Variant.Text"></RadzenBadge>
                                            }
                                            else
                                            {
                                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Warning" Text="Unread" Variant="Variant.Text"></RadzenBadge>
                                            }
                                            @* <hr style="border: none; background-color: #0c0d0e; height: 1px; margin: 1rem 0;" /> *@
                                            <RadzenStack Orientation="Orientation.Horizontal">
                                                <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Text="Mark as read" Icon="mark_chat_read" Click="@(() => MarkAsRead(notification))"></RadzenButton>
                                                <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Text="Recommendation" Icon="assistant_direction" Click="@(()=>NavigateToRecommendation(notification.Recommendation.Id))"></RadzenButton>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                }
                            </Template>

                        </RadzenDataList>
                    }
                </Popup>
            </RadzenMenu>
        </RadzenStack>

        @code{
            bool notificationBtnVisible = false;
            RadzenButton btnref;
            RadzenMenu notificationMenu;
            Popup notificationPopup;

            private void ShowToolTipText(ElementReference obj, string text)
            {
                _tooltipService.OpenOnTheTop(obj, text, new TooltipOptions() { Position = TooltipPosition.Top, Duration = 2000 });
            }


        }

    </RadzenHeader>
    <RadzenSidebar Style="display: flex;  justify-content: space-between; flex-direction: column;" @bind-Expanded="@sidebarExpanded">
        <RadzenPanelMenu>


            @if (!isAuthenticated)
            {
                <RadzenPanelMenuItem Text="Home" Icon="home"/>
                <RadzenPanelMenuItem Text="Login" Icon="account_circle" Click="@(() => NavigationManager.NavigateTo("/login"))"/>
                <RadzenPanelMenuItem Text="Register" Icon="account_circle" Click="@(() => NavigationManager.NavigateTo("/register"))"/>
            }
            else if (!isVerified)
            {
                <RadzenText Text="Please verify your email address" class="rz-my-4"/>
            }
            else
            {
                <RadzenPanelMenuItem class="rz-my-4" Text="Home" Path="/" Icon="home"/>

                <RadzenPanelMenuItem Visible="isAuditor" Icon="chrome_reader_mode" Text="Audit Missions">
                    <RadzenPanelMenuItem class="rz-my-2" Text="Current Mission" Path=@($"/audit-mission/{_currentUserAuditMission}") Icon="favorite"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="Create Mission" Path="/create-mission" Icon="add"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="List Missions" Path="/audit-missions" Icon="list"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="Search Audit Mission" Icon="search">
                        <RadzenStack class="rz-my-2" Orientation="Orientation.Vertical">
                            <RadzenAutoComplete ValueChanged="@((value) => AuditMissionSearchChanged(value))"
                                                TextProperty="Name"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Data="@_auditMissions"
                                                Placeholder="Audit Mission name...">
                            </RadzenAutoComplete>
                            <RadzenButton Click="@NavigateToAuditMission" Text="Go" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Small"></RadzenButton>
                        </RadzenStack>
                    </RadzenPanelMenuItem>
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-4" Icon="all_out" Text="Objectives">
                    <RadzenPanelMenuItem class="rz-my-2" Text="Create Objective" Path="/create-objective" Icon="add"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="List Objectives" Path="/objectives" Icon="list"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="Create Objective Action" Path="/create-objective-action" Icon="add"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="View FIAPS" Path="/fiaps" Icon="history_edu"/>

                    <RadzenPanelMenuItem class="rz-my-2" Text="Search Objective" Icon="search">

                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenAutoComplete Data="@_objectives"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                TextProperty="Name"
                                                ValueChanged="@((value) => ObjectiveChanged(value))"
                                                Placeholder="Objective name...">
                            </RadzenAutoComplete>
                            <RadzenButton Click="@NavigateToObjective" Text="Go" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Small"></RadzenButton>
                        </RadzenStack>

                    </RadzenPanelMenuItem>

                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem class="rz-my-4" Icon="feedback" Text="Recommendations">
                    <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-2" Path="add-recommendation" Icon="add" Text="Add Recommendation"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-2" Path="/recommendations" Icon="list" Text="View Recommendations"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Visible="@(isVerified & !isAuditor)" class="rz-my-2" Path="/view-recommendations" Icon="list" Text="View Recommendations"></RadzenPanelMenuItem>

                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-4" Icon="description" Text="Documents">
                    <RadzenPanelMenuItem class="rz-my-2" Text="Upload Document" Path="/upload-document" Icon="add"/>
                    <RadzenPanelMenuItem class="rz-my-2" Text="List Documents" Path="/documents" Icon="list"/>
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-4" Icon="history" Text="Activities">
                    <RadzenPanelMenuItem class="rz-my-2" Click="@NavigateActivity" Icon="add" Text="Add Activity"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem class="rz-my-2" Icon="list" Path="/activities" Text="List Activities"></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible="isAuditor" Icon="bookmark_border" class="rz-my-4" Text="Export">
                    <RadzenPanelMenuItem Path="/export-activities" class="rz-my-2" Icon="open_in_new_off" Text="Export Activities"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Path="/export-fiap" class="rz-my-4" Icon="article" Text="Autocomplete FIAP "></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Click="@ExportFullObjectives" class="rz-my-2" Icon="edit_document" Text="Export Objectives and Risks "></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>
                <RadzenPanelMenuItem  class="rz-my-4" Icon="card_membership" Text="Acces control">
                    <RadzenPanelMenuItem class="rz-my-2" Icon="pageview" Path="/view-access" Text="View received access" />
                    <RadzenPanelMenuItem class="rz-my-2" Icon="key" Path="/view-granted-access" Text="View granted access" />

                </RadzenPanelMenuItem>

                <RadzenPanelMenuItem Visible="isAuditor" class="rz-my-4" Icon="build" Text="Configure">
                    <RadzenPanelMenuItem Path="/departments?institutionId=" Icon="book" Text="Configure Departments" class="rz-my-2"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Icon="account_balance" class="rz-my-2" Path="/institutions" Text="Configure Institutions"></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>
            }
        </RadzenPanelMenu>
        <RadzenPanelMenu>
            @if (isAuthenticated)
            {
                <RadzenButton Text="Logout" Click="@SignOut" Icon="logout"></RadzenButton>
            }

        </RadzenPanelMenu>

    </RadzenSidebar>
    <RadzenBody>


        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </RadzenBody>
</RadzenLayout>
<RadzenDialog/>
<RadzenNotification></RadzenNotification>
<RadzenTooltip></RadzenTooltip>

@code
{

    bool sidebarExpanded = true;
    bool isAuthenticated = false;
    bool isVerified = false;
    bool isAuditor = false;
    private Guid _currentUserAuditMission = Guid.Empty;

    private Guid _selectedObjectiveId = Guid.Empty;
    private Guid _selectedAuditMissionId = Guid.Empty;

    private List<BaseAuditMissionDto> _auditMissions = [];
    private List<BaseObjectiveViewModel> _objectives = [];
}

@functions

{


    protected override async Task OnInitializedAsync()
    {
        customAuthState.AuthenticationStateChanged += RefreshNavbar;
        _currentUserChangedMissionService.CurrentUserChangedMission += async () => await UpdateCurrentAutidMission();
        var authState = await customAuthState.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity is { IsAuthenticated: true };
        isVerified = authState.User.IsInRole("Verified");
        isAuditor = authState.User.IsInRole("Auditor");


        var claims = customAuthState.GetClaims(authState);
        ClaimResponse? first = null;
        foreach (var x in claims)
        {
            if (x.Type == "Institution")
            {
                first = x;
                break;
            }
        }

        if (first != null)
        {
            var institution = first.Value;

            var institutionId = Guid.Parse(institution);
            InstitutionId = institutionId;
        }


        await FetchAuditMissions();
        await FetchCurrentAuditMission();
        await FetchObjectives();
    }

    private async Task UpdateCurrentAutidMission()
    {
        await FetchCurrentAuditMission();
        await FetchObjectives();
        await FetchAuditMissions();
        StateHasChanged();
    }

    private async Task FetchAuditMissions()
    {
        var auditMissions = await _auditMissionService.GetAuditMissionByOwnerId();
        if (auditMissions.Success)
        {
            _auditMissions = auditMissions.DtoResponses;
        }
    }

    private async Task FetchCurrentAuditMission()
    {
        var result = await _currentAuditMissionService.GetCurrentUserAuditMissionAsync();

        if (result.Success)
        {
            _currentUserAuditMission = result.DtoResponse.AuditMissionId;
        }
    }

    private async Task FetchObjectives()
    {
        if (_currentUserAuditMission == Guid.Empty)
        {
            await FetchCurrentAuditMission();
        }


        var response = await _objectiveService.GetObjectivesByAuditMissionIdAsync(_currentUserAuditMission);

        if (response.Success)
        {
            _objectives = response.DtoResponses;
        }
    }

    private async void RefreshNavbar(Task<AuthenticationState> task)
    {
        // await OnInitializedAsync();


        StateHasChanged();
    }

    private async void SignOut()
    {
        var confirm = await DialogService.Confirm("Are you sure you want to Log out ?", "Confirm Logout", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirm.Value == true)
        {
            isAuthenticated = false;
            customAuthState.SignOut();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            return;
        }
    }

    private void NavigateToAuditMission()
    {
        if (_selectedAuditMissionId != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/audit-mission/{_selectedAuditMissionId}");
            _selectedAuditMissionId = Guid.Empty;
        }
        else
        {
        }
    }

    private Task AuditMissionSearchChanged(string value)
    {
        var auditMission = _auditMissions.Find(x => x.Name.Equals(value));

        if (auditMission != null)
        {
            _selectedAuditMissionId = auditMission.Id;
        }

        return Task.CompletedTask;
    }

    private Task ObjectiveChanged(string value)
    {
        var objective = _objectives.Find(x => x.Name.Equals(value));


        if (objective != null)
        {
            _selectedObjectiveId = objective.Id;
        }

        return Task.CompletedTask;
    }

    private void NavigateToObjective()
    {
        if (_selectedObjectiveId != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/objective/{_selectedObjectiveId}");
            _selectedObjectiveId = Guid.Empty;
        }
        else
        {
        }
    }

    private void ExportFullObjectives(MenuItemEventArgs obj)
    {
        DialogService.Open<ExportFullObjectivesComponent>(
            "Export Full Objectives",
            new Dictionary<string, object>
            {
                { "AuditMissionId", _currentUserAuditMission },
                { "Missions", _auditMissions }
            },
            new DialogOptions { Width = "50%", Height = "60%" });
    }

    private async Task NavigateActivity(MenuItemEventArgs obj)
    {
        await FetchObjectives();
        DialogService.Open<AddNewActivityFullDialog>(
            "Add new Activity",
            new Dictionary<string, object>()
            {
                { "Objectives", _objectives },
                { "AuditMissionId", _currentUserAuditMission }
            },
            new DialogOptions { Width = "50%", Height = "60%" }
        );
    }

    private async Task OpenNotification(MenuItemEventArgs obj)
    {
        //get the user institution from the claims
        var authState = await customAuthState.GetAuthenticationStateAsync();
        var claims = customAuthState.GetClaims(authState);

        var institutionId = Guid.Parse(claims.FirstOrDefault(x => x.Type == "Institution").Value);
        InstitutionId = institutionId;
        DialogService.Open<AllNotificationsDialog>(
            "Notifications",
            new Dictionary<string, object>
            {
                { "InstitutionId", institutionId }
            },
            new DialogOptions { Width = "50%", Height = "60%" });
    }

    private async Task OnNotificationPopupOpen()
    {
        var response = await _auditNotificationService.GetNotificationsByInstitutionIdAsync(InstitutionId);

        if (response.Success)
        {
            if (isAuditor)
            {
                var unreadNotifications = response.DtoResponses
                    .Where(x => x.IsRead == false && x.NotificationType == NotificationType.FromInstitution)
                    .OrderByDescending(x => x.LastModifiedDate)
                    .ToList();

                Notifications = unreadNotifications;
            }
            else
            {
                var unreadNotifications = response.DtoResponses
                    .Where(x => x.IsRead == false && x.NotificationType == NotificationType.FromAuditor)
                    .OrderByDescending(x => x.LastModifiedDate)
                    .ToList();
                Notifications = unreadNotifications;
            }
        }
    }
}

@code
{
    private Guid InstitutionId { get; set; } = Guid.Empty;

    public List<BaseNotificationViewModel> Notifications { get; set; } = [];

    private async Task DisplayPopup(MouseEventArgs obj)
    {
        //make the button visible
        notificationBtnVisible = true;
        StateHasChanged();
        await notificationPopup.ToggleAsync(notificationMenu.Element);
    }

    private void NavigateRecommendations(MouseEventArgs obj)
    {
        if (isAuditor)
        {
            NavigationManager.NavigateTo("/recommendations");
        }
        else
        {
            NavigationManager.NavigateTo("/view-recommendations");
        }
    }

    private async Task MarkAsRead(BaseNotificationViewModel notification)
    {
        notification.IsRead = true;

        var response = await _auditNotificationService.SetNotificationReadAsync(notification.Id);
    }

    private async  Task NavigateToRecommendation(Guid recommendationId)
    {
        var auditMission = await _auditMissionService.GetAuditMissionByRecommendation(recommendationId);

        if (auditMission is { DtoResponse: not null, Success: true } && auditMission.DtoResponse.Id != Guid.Empty)
        {
            if (isAuditor)
            {

                NavigationManager.NavigateTo($"/recommendations?auditMissionId={auditMission.DtoResponse.Id}",forceLoad:true);

            }

            else if (isVerified)
            {
                NavigationManager.NavigateTo($"/view-recommendations?auditMissionId={auditMission.DtoResponse.Id}",forceLoad:true);
            }
        }
    }
}