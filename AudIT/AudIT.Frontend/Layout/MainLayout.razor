@using Frontend.Services.AuthentificationServices
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject CustomAuthStateProvider customAuthState
@inject NavigationManager NavigationManager
@inject DialogService DialogService

<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)"/>
            <RadzenLabel Text="AudIT App"/>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Style="display: flex;  justify-content: space-between; flex-direction: column;" @bind-Expanded="@sidebarExpanded">
        <RadzenPanelMenu>


            @if (!isAuthenticated)
            {
                <RadzenPanelMenuItem Text="Home" Icon="home"/>
                <RadzenPanelMenuItem Text="Login" Icon="account_circle" Click="@(() => NavigationManager.NavigateTo("/login"))"/>
                <RadzenPanelMenuItem Text="Register" Icon="account_circle" Click="@(() => NavigationManager.NavigateTo("/register"))"/>
            }
            else
            {
                <RadzenPanelMenuItem Text="Home" Path="/" Icon="home"/>
                <RadzenPanelMenuItem Text="Audit Missions">
                    <RadzenPanelMenuItem Text="Create Mission" Path="/create-mission" Icon="add"/>
                    <RadzenPanelMenuItem Text="List Missions" Path="/audit-missions" Icon="list"/>
                </RadzenPanelMenuItem>

            }
        </RadzenPanelMenu>
        <RadzenPanelMenu>
            @if (isAuthenticated)
            {
                <RadzenButton Text="Logout"  Click="@SignOut"  Icon="logout"></RadzenButton>
            }

        </RadzenPanelMenu>

    </RadzenSidebar>
    <RadzenBody>


        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </RadzenBody>
</RadzenLayout>
<RadzenDialog/>
<RadzenNotification></RadzenNotification>
@code
{

    bool sidebarExpanded = true;
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        customAuthState.AuthenticationStateChanged += RefreshNavbar;
        var authState = await customAuthState.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity is { IsAuthenticated: true };
    }

    private async void RefreshNavbar(Task<AuthenticationState> task)
    {
        // await OnInitializedAsync();
        StateHasChanged();
    }

    private async void SignOut()
    {

        var confirm = await DialogService.Confirm("Are you sure you want to Log out ?", "Confirm Logout", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirm.Value == true)
        {
            isAuthenticated = false;
            customAuthState.SignOut();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            return;
        }

    }


}